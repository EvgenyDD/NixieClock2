###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.10.1.50424 for Atmel AVR        19/Nov/2014  09:36:44 #
# Copyright 1996-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  H:\WORKSPACE\NixieClock2\BackLight.c                     #
#    Command line =  H:\WORKSPACE\NixieClock2\BackLight.c --cpu=m16 -ms -o    #
#                    H:\WORKSPACE\NixieClock2\Debug\Obj\ -lC                  #
#                    H:\WORKSPACE\NixieClock2\Debug\List\                     #
#                    --initializers_in_flash --no_cse --no_inline             #
#                    --no_code_motion --no_cross_call --no_clustering         #
#                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e            #
#                    --eeprom_size 512 --clib -Ol                             #
#    List file    =  H:\WORKSPACE\NixieClock2\Debug\List\BackLight.lst        #
#    Object file  =  H:\WORKSPACE\NixieClock2\Debug\Obj\BackLight.r90         #
#                                                                             #
#                                                                             #
###############################################################################

H:\WORKSPACE\NixieClock2\BackLight.c
      1          /* Includes ------------------------------------------------------------------*/
      2          #include "all.h"
      3          #include "backlight.h"
      4          #include "transient.h"
      5          
      6          
      7          /* Private typedef -----------------------------------------------------------*/
      8          /* Private define ------------------------------------------------------------*/
      9          #define SMOOTH_PWM_MAX  255
     10          #define NUL 0
     11          
     12          enum {WAITING, UP, DOWN};
     13          
     14          
     15          /* Private macro -------------------------------------------------------------*/
     16          /* Private constants ---------------------------------------------------------*/

   \                                 In  segment NEAR_F, align 1, keep-with-next
     17          __flash uint8_t TABLE[][18] = {
   \                     TABLE:
   \   00000000   000101000000       DC8 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1
   \              000101000100
   \              000101010001
   \              0100000001  
   \   00000017   000000010101       DC8 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0
   \              010001010000
   \              000101000000
   \              0001010000  
   \   0000002E   010101000100       DC8 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1
   \              010101000001
   \              000001000001
   \              0001010001  
   \   00000045   000101010000       DC8 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0
   \              000001010100
   \              000001010001
   \              0101000000  
   \   0000005C   010000010101       DC8 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1
   \              010000000001
   \              00010101    
     18          { 1,0,0, 1,0,0, 1,0,0, 1,0,1, 1,0,1, 1,1,0}, //FIRST COLOR
     19          { 0,1,0, 0,1,0, 0,1,0, 1,1,0, 1,1,1, 0,0,1}, //FIRST COLOR
     20          { 0,0,1, 0,0,1, 0,0,1, 0,1,1, 0,1,0, 1,1,1}, //FIRST COLOR
     21          { 0,1,1, 0,0,0, 0,1,1, 0,1,0, 0,1,1, 1,0,1}, //SECOND COLOR
     22          { 1,0,0, 0,0,1, 1,0,1, 0,0,1, 1,1,0, 1,1,0}, //SECOND COLOR
     23          { 0,0,0, 1,1,0, 1,1,0, 1,0,0, 1,0,1, 0,1,1}  //SECOND COLOR
     24          }; //binary colors - 2bit color))
     25          

   \                                 In  segment NEAR_F, align 1, keep-with-next
     26          __flash uint8_t RandomChannelEachBL[18] = {
   \                     RandomChannelEachBL:
   \   00000000   11000C050B06       DC8 0, 17, 5, 12, 6, 11, 1, 7, 14, 13, 16, 4, 2, 8, 10, 9, 15, 3
   \              07010D0E0410
   \              0802090A030F
     27           0,17,5, 12,6,11, 1,7,14, 13,16,4, 2,8,10, 9,15,3
     28          }; //make choise more random
     29          
     30          
     31          /* Private variables ---------------------------------------------------------*/

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     32          uint8_t ManualR, ManualG, ManualB;                  //static colors for manual color set
   \                     ManualR:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ManualG:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ManualB:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     33          uint8_t binaryType = 0;                             //binary colors set
   \                     binaryType:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     34          uint8_t BLType = 0;                                 //backlight type
   \                     BLType:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     35          uint8_t mixTime = 0;                                 //backlight type
   \                     mixTime:
   \   00000000                      DS8 1
     36          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     37          struct SmoothType smooth[SMOOTH_NUM_CHANNELS];
   \                     smooth:
   \   00000000                      DS8 108
     38          

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     39          struct SmoothSettings sFire = { 
   \                     sFire:
   \   00000000                      DS8 6
   \   00000006                      REQUIRE `?<Initializer for sFire>`
     40              &GiveTargetBLFire, 
     41              &GiveSpeedBLFire, 
     42              &GiveWaitBLFire
     43          };

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     44          struct SmoothSettings sRandomAll = {
   \                     sRandomAll:
   \   00000000                      DS8 6
   \   00000006                      REQUIRE `?<Initializer for sRandomAll>`
     45              &GiveTargetBLRandAll,
     46              &GiveSpeedBLRandAll,
     47              &GiveWaitBLRandAll
     48          };

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     49          struct SmoothSettings sRandomEach = {
   \                     sRandomEach:
   \   00000000                      DS8 6
   \   00000006                      REQUIRE `?<Initializer for sRandomEach>`
     50              &GiveTargetBLRandEach,                               
     51              &GiveSpeedBLRandEach, 
     52              &GiveWaitBLRandEach
     53          };

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     54          struct SmoothSettings sShift = {
   \                     sShift:
   \   00000000                      DS8 6
   \   00000006                      REQUIRE `?<Initializer for sShift>`
     55              &GiveTargetBLShift,
     56              &GiveSpeedBLShift,
     57              &GiveWaitBLShift
     58          };

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     59          struct SmoothSettings sBinary = {
   \                     sBinary:
   \   00000000                      DS8 6
   \   00000006                      REQUIRE `?<Initializer for sBinary>`
     60              &GiveTargetBLBinary,
     61              &GiveSpeedBLBinary,
     62              &GiveWaitBLBinary
     63          };
     64          
     65          
     66          /* Extern variables ----------------------------------------------------------*/
     67          extern uint8_t sec;
     68          extern volatile uint8_t outR[6], outG[6], outB[6]; 
     69          extern __eeprom __no_init uint8_t eMIX_DELAY;
     70          
     71          
     72          /* Private function prototypes -----------------------------------------------*/
     73          /* Private functions ---------------------------------------------------------*/
     74          /*******************************************************************************
     75          * Function Name  : ZeroBL
     76          * Description    : Reset all backlight to zero
     77          *******************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     78          void ZeroBL()
   \                     ZeroBL:
     79          {
     80              for(uint8_t i=0; i<6; i++)
   \   00000000   E000               LDI     R16, 0
   \   00000002   C011               RJMP    ??ZeroBL_0
     81                  outR[i] = outG[i] = outB[i] = 0;
   \                     ??ZeroBL_1:
   \   00000004   E020               LDI     R18, 0
   \   00000006   E010               LDI     R17, 0
   \   00000008   01F8               MOVW    R31:R30, R17:R16
   \   0000000A   ....               SUBI    R30, LOW((-(outB) & 0xFFFF))
   \   0000000C   ....               SBCI    R31, (-(outB) & 0xFFFF) >> 8
   \   0000000E   8320               ST      Z, R18
   \   00000010   E010               LDI     R17, 0
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   ....               SUBI    R30, LOW((-(outG) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(outG) & 0xFFFF) >> 8
   \   00000018   8320               ST      Z, R18
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   01F8               MOVW    R31:R30, R17:R16
   \   0000001E   ....               SUBI    R30, LOW((-(outR) & 0xFFFF))
   \   00000020   ....               SBCI    R31, (-(outR) & 0xFFFF) >> 8
   \   00000022   8320               ST      Z, R18
   \   00000024   9503               INC     R16
   \                     ??ZeroBL_0:
   \   00000026   3006               CPI     R16, 6
   \   00000028   F368               BRCS    ??ZeroBL_1
     82          }
   \   0000002A   9508               RET
     83          
     84          
     85          /*******************************************************************************
     86          * Function Name  : HSVtoRGB
     87          * Description    : Convert HUE -> RGB colors
     88          * Input          : Pointers for Red, Green, Blue
     89          * Input          : Hue value
     90          *******************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     91          void HSVtoRGB( uint8_t *r, uint8_t *g, uint8_t *b, uint16_t i_hue )
   \                     HSVtoRGB:
     92          {
   \   00000000   ........           CALL    ?PROLOGUE13_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004                      REQUIRE ?Register_R12_is_cg_reg
   \   00000004   0138               MOVW    R7:R6, R17:R16
   \   00000006   0159               MOVW    R11:R10, R19:R18
   \   00000008   012A               MOVW    R5:R4, R21:R20
   \   0000000A   C002               RJMP    ??HSVtoRGB_0
     93              uint16_t ii;
     94              double fr, hue;
     95              uint8_t c2, c3;
     96              
     97              while (i_hue >= 360) i_hue -= 360;
   \                     ??HSVtoRGB_1:
   \   0000000C   5668               SUBI    R22, 104
   \   0000000E   4071               SBCI    R23, 1
   \                     ??HSVtoRGB_0:
   \   00000010   3668               CPI     R22, 104
   \   00000012   E001               LDI     R16, 1
   \   00000014   0770               CPC     R23, R16
   \   00000016   F7D0               BRCC    ??HSVtoRGB_1
     98              
     99              hue = i_hue;
   \   00000018   018B               MOVW    R17:R16, R23:R22
   \   0000001A   E020               LDI     R18, 0
   \   0000001C   E030               LDI     R19, 0
   \   0000001E   ........           CALL    ?UL2F_L04
   \   00000022   01C8               MOVW    R25:R24, R17:R16
   \   00000024   01D9               MOVW    R27:R26, R19:R18
    100              ii = (uint16_t)(hue /= 60.0);
   \   00000026   E040               LDI     R20, 0
   \   00000028   E050               LDI     R21, 0
   \   0000002A   E760               LDI     R22, 112
   \   0000002C   E472               LDI     R23, 66
   \   0000002E   018C               MOVW    R17:R16, R25:R24
   \   00000030   019D               MOVW    R19:R18, R27:R26
   \   00000032   ........           CALL    ?F_DIV_L04
   \   00000036   01C8               MOVW    R25:R24, R17:R16
   \   00000038   01D9               MOVW    R27:R26, R19:R18
   \   0000003A   ........           CALL    ?F2SL_L04
   \   0000003E   0148               MOVW    R9:R8, R17:R16
    101              fr = hue - ii;
   \   00000040   0184               MOVW    R17:R16, R9:R8
   \   00000042   E020               LDI     R18, 0
   \   00000044   E030               LDI     R19, 0
   \   00000046   ........           CALL    ?UL2F_L04
   \   0000004A   01A8               MOVW    R21:R20, R17:R16
   \   0000004C   01B9               MOVW    R23:R22, R19:R18
   \   0000004E   018C               MOVW    R17:R16, R25:R24
   \   00000050   019D               MOVW    R19:R18, R27:R26
   \   00000052   ........           CALL    ?F_SUB_L04
   \   00000056   01C8               MOVW    R25:R24, R17:R16
   \   00000058   01D9               MOVW    R27:R26, R19:R18
    102              c2 = (uint8_t)(255 - 255 * fr);
   \   0000005A   E040               LDI     R20, 0
   \   0000005C   E050               LDI     R21, 0
   \   0000005E   E76F               LDI     R22, 127
   \   00000060   E473               LDI     R23, 67
   \   00000062   018C               MOVW    R17:R16, R25:R24
   \   00000064   019D               MOVW    R19:R18, R27:R26
   \   00000066   ........           CALL    ?F_MUL_L04
   \   0000006A   01A8               MOVW    R21:R20, R17:R16
   \   0000006C   01B9               MOVW    R23:R22, R19:R18
   \   0000006E   E000               LDI     R16, 0
   \   00000070   E010               LDI     R17, 0
   \   00000072   E72F               LDI     R18, 127
   \   00000074   E433               LDI     R19, 67
   \   00000076   ........           CALL    ?F_SUB_L04
   \   0000007A   ........           CALL    ?F2SL_L04
   \   0000007E   2EC0               MOV     R12, R16
    103              c3 = (uint8_t)(255 * fr);
   \   00000080   E040               LDI     R20, 0
   \   00000082   E050               LDI     R21, 0
   \   00000084   E76F               LDI     R22, 127
   \   00000086   E473               LDI     R23, 67
   \   00000088   018C               MOVW    R17:R16, R25:R24
   \   0000008A   019D               MOVW    R19:R18, R27:R26
   \   0000008C   ........           CALL    ?F_MUL_L04
   \   00000090   ........           CALL    ?F2SL_L04
   \   00000094   2F80               MOV     R24, R16
    104              
    105              switch (ii)
   \   00000096   0184               MOVW    R17:R16, R9:R8
   \   00000098   ....               LDI     R30, LOW(`?<Jumptable for HSVtoRGB>_0`)
   \   0000009A   ....               LDI     R31, (`?<Jumptable for HSVtoRGB>_0`) >> 8
   \   0000009C   ........           JMP     ?SV_SWITCH_L06
    106              { 
    107                  case 0: *r = 255; *g = c3;  *b = 0;   break;
   \                     ??HSVtoRGB_2:
   \   000000A0   EF0F               LDI     R16, 255
   \   000000A2   01F3               MOVW    R31:R30, R7:R6
   \   000000A4   8300               ST      Z, R16
   \   000000A6   01F5               MOVW    R31:R30, R11:R10
   \   000000A8   8380               ST      Z, R24
   \   000000AA   E000               LDI     R16, 0
   \   000000AC   01F2               MOVW    R31:R30, R5:R4
   \   000000AE   8300               ST      Z, R16
   \   000000B0   C02C               RJMP    ??HSVtoRGB_3
    108                  case 1: *r = c2;  *g = 255; *b = 0;   break;
   \                     ??HSVtoRGB_4:
   \   000000B2   01F3               MOVW    R31:R30, R7:R6
   \   000000B4   82C0               ST      Z, R12
   \   000000B6   EF0F               LDI     R16, 255
   \   000000B8   01F5               MOVW    R31:R30, R11:R10
   \   000000BA   8300               ST      Z, R16
   \   000000BC   E000               LDI     R16, 0
   \   000000BE   01F2               MOVW    R31:R30, R5:R4
   \   000000C0   8300               ST      Z, R16
   \   000000C2   C023               RJMP    ??HSVtoRGB_3
    109                  case 2: *r = 0;   *g = 255; *b = c3;  break;
   \                     ??HSVtoRGB_5:
   \   000000C4   E000               LDI     R16, 0
   \   000000C6   01F3               MOVW    R31:R30, R7:R6
   \   000000C8   8300               ST      Z, R16
   \   000000CA   EF0F               LDI     R16, 255
   \   000000CC   01F5               MOVW    R31:R30, R11:R10
   \   000000CE   8300               ST      Z, R16
   \   000000D0   01F2               MOVW    R31:R30, R5:R4
   \   000000D2   8380               ST      Z, R24
   \   000000D4   C01A               RJMP    ??HSVtoRGB_3
    110                  case 3: *r = 0;   *g = c2;  *b = 255; break;
   \                     ??HSVtoRGB_6:
   \   000000D6   E000               LDI     R16, 0
   \   000000D8   01F3               MOVW    R31:R30, R7:R6
   \   000000DA   8300               ST      Z, R16
   \   000000DC   01F5               MOVW    R31:R30, R11:R10
   \   000000DE   82C0               ST      Z, R12
   \   000000E0   EF0F               LDI     R16, 255
   \   000000E2   01F2               MOVW    R31:R30, R5:R4
   \   000000E4   8300               ST      Z, R16
   \   000000E6   C011               RJMP    ??HSVtoRGB_3
    111                  case 4: *r = c3;  *g = 0;   *b = 255; break;
   \                     ??HSVtoRGB_7:
   \   000000E8   01F3               MOVW    R31:R30, R7:R6
   \   000000EA   8380               ST      Z, R24
   \   000000EC   E000               LDI     R16, 0
   \   000000EE   01F5               MOVW    R31:R30, R11:R10
   \   000000F0   8300               ST      Z, R16
   \   000000F2   EF0F               LDI     R16, 255
   \   000000F4   01F2               MOVW    R31:R30, R5:R4
   \   000000F6   8300               ST      Z, R16
   \   000000F8   C008               RJMP    ??HSVtoRGB_3
    112                  case 5: *r = 255; *g = 0;   *b = c2;  break;
   \                     ??HSVtoRGB_8:
   \   000000FA   EF0F               LDI     R16, 255
   \   000000FC   01F3               MOVW    R31:R30, R7:R6
   \   000000FE   8300               ST      Z, R16
   \   00000100   E000               LDI     R16, 0
   \   00000102   01F5               MOVW    R31:R30, R11:R10
   \   00000104   8300               ST      Z, R16
   \   00000106   01F2               MOVW    R31:R30, R5:R4
   \   00000108   82C0               ST      Z, R12
    113              }
    114          }
   \                     ??HSVtoRGB_3:
   \   0000010A   E0ED               LDI     R30, 13
   \   0000010C   ........           JMP     ?EPILOGUE_B13_L09
    115          
    116          
    117          /*******************************************************************************
    118          * Function Name  : SmoothInit
    119          * Description    : Initialize smooth channel
    120          *******************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    121          void SmoothInit(uint8_t channel)
   \                     SmoothInit:
    122          {
   \   00000000   2F40               MOV     R20, R16
    123              smooth[channel].speed = 1;
   \   00000002   E021               LDI     R18, 1
   \   00000004   E050               LDI     R21, 0
   \   00000006   E006               LDI     R16, 6
   \   00000008   E010               LDI     R17, 0
   \   0000000A   ........           CALL    ?S_EC_MUL_L02
   \   0000000E   01F8               MOVW    R31:R30, R17:R16
   \   00000010   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   00000014   8320               ST      Z, R18
    124              smooth[channel].state = WAITING;
   \   00000016   E020               LDI     R18, 0
   \   00000018   E050               LDI     R21, 0
   \   0000001A   E006               LDI     R16, 6
   \   0000001C   E010               LDI     R17, 0
   \   0000001E   ........           CALL    ?S_EC_MUL_L02
   \   00000022   01F8               MOVW    R31:R30, R17:R16
   \   00000024   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   00000026   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   00000028   8323               STD     Z+3, R18
    125              smooth[channel].current = smooth[channel].target = 0;    
   \   0000002A   E020               LDI     R18, 0
   \   0000002C   E050               LDI     R21, 0
   \   0000002E   E006               LDI     R16, 6
   \   00000030   E010               LDI     R17, 0
   \   00000032   ........           CALL    ?S_EC_MUL_L02
   \   00000036   01F8               MOVW    R31:R30, R17:R16
   \   00000038   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   0000003A   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   0000003C   8321               STD     Z+1, R18
   \   0000003E   E050               LDI     R21, 0
   \   00000040   E006               LDI     R16, 6
   \   00000042   E010               LDI     R17, 0
   \   00000044   ........           CALL    ?S_EC_MUL_L02
   \   00000048   01F8               MOVW    R31:R30, R17:R16
   \   0000004A   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   0000004C   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   0000004E   8322               STD     Z+2, R18
    126          }
   \   00000050   9508               RET
    127          
    128          
    129          /*******************************************************************************
    130          * Function Name  : SmoothProcess
    131          * Description    : Process smooth backlight change
    132          *******************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    133          void SmoothProcess(uint8_t channel, struct SmoothSettings *pSettings)
   \                     SmoothProcess:
    134          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2F80               MOV     R24, R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
    135              if(smooth[channel].waitTimer == 0)
   \   00000008   2F48               MOV     R20, R24
   \   0000000A   E050               LDI     R21, 0
   \   0000000C   E006               LDI     R16, 6
   \   0000000E   E010               LDI     R17, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   0000001A   8104               LDD     R16, Z+4
   \   0000001C   8115               LDD     R17, Z+5
   \   0000001E   2B01               OR      R16, R17
   \   00000020   F009               BREQ    $+2+2
   \   00000022   C13F               RJMP    ??SmoothProcess_0
    136              {
    137                  if(smooth[channel].state == WAITING)
   \   00000024   2F48               MOV     R20, R24
   \   00000026   E050               LDI     R21, 0
   \   00000028   E006               LDI     R16, 6
   \   0000002A   E010               LDI     R17, 0
   \   0000002C   ........           CALL    ?S_EC_MUL_L02
   \   00000030   01F8               MOVW    R31:R30, R17:R16
   \   00000032   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   00000034   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   00000036   8103               LDD     R16, Z+3
   \   00000038   2300               TST     R16
   \   0000003A   F009               BREQ    $+2+2
   \   0000003C   C04E               RJMP    ??SmoothProcess_1
    138                  {           
    139                      smooth[channel].target = pSettings->pGetTarget(channel);
   \   0000003E   2F08               MOV     R16, R24
   \   00000040   91ED               LD      R30, X+
   \   00000042   91FC               LD      R31, X
   \   00000044   9711               SBIW    R27:R26, 1
   \   00000046   9509               ICALL
   \   00000048   2F20               MOV     R18, R16
   \   0000004A   2F48               MOV     R20, R24
   \   0000004C   E050               LDI     R21, 0
   \   0000004E   E006               LDI     R16, 6
   \   00000050   E010               LDI     R17, 0
   \   00000052   ........           CALL    ?S_EC_MUL_L02
   \   00000056   01F8               MOVW    R31:R30, R17:R16
   \   00000058   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   0000005A   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   0000005C   8321               STD     Z+1, R18
    140                      smooth[channel].speed  = pSettings->pGetSpeed(channel);
   \   0000005E   2F08               MOV     R16, R24
   \   00000060   01FD               MOVW    R31:R30, R27:R26
   \   00000062   8122               LDD     R18, Z+2
   \   00000064   8133               LDD     R19, Z+3
   \   00000066   01F9               MOVW    R31:R30, R19:R18
   \   00000068   9509               ICALL
   \   0000006A   2F20               MOV     R18, R16
   \   0000006C   2F48               MOV     R20, R24
   \   0000006E   E050               LDI     R21, 0
   \   00000070   E006               LDI     R16, 6
   \   00000072   E010               LDI     R17, 0
   \   00000074   ........           CALL    ?S_EC_MUL_L02
   \   00000078   01F8               MOVW    R31:R30, R17:R16
   \   0000007A   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   0000007C   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   0000007E   8320               ST      Z, R18
    141                      
    142                      if(smooth[channel].target > smooth[channel].current)
   \   00000080   2F48               MOV     R20, R24
   \   00000082   E050               LDI     R21, 0
   \   00000084   E006               LDI     R16, 6
   \   00000086   E010               LDI     R17, 0
   \   00000088   ........           CALL    ?S_EC_MUL_L02
   \   0000008C   01F8               MOVW    R31:R30, R17:R16
   \   0000008E   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   00000090   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   00000092   8122               LDD     R18, Z+2
   \   00000094   2F48               MOV     R20, R24
   \   00000096   E050               LDI     R21, 0
   \   00000098   E006               LDI     R16, 6
   \   0000009A   E010               LDI     R17, 0
   \   0000009C   ........           CALL    ?S_EC_MUL_L02
   \   000000A0   01F8               MOVW    R31:R30, R17:R16
   \   000000A2   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   000000A4   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   000000A6   8101               LDD     R16, Z+1
   \   000000A8   1720               CP      R18, R16
   \   000000AA   F460               BRCC    ??SmoothProcess_2
    143                      {
    144                          smooth[channel].state = UP;
   \   000000AC   E021               LDI     R18, 1
   \   000000AE   2F48               MOV     R20, R24
   \   000000B0   E050               LDI     R21, 0
   \   000000B2   E006               LDI     R16, 6
   \   000000B4   E010               LDI     R17, 0
   \   000000B6   ........           CALL    ?S_EC_MUL_L02
   \   000000BA   01F8               MOVW    R31:R30, R17:R16
   \   000000BC   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   000000BE   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   000000C0   8323               STD     Z+3, R18
   \   000000C2   C00B               RJMP    ??SmoothProcess_1
    145                      }
    146                      else
    147                      {
    148                          smooth[channel].state = DOWN;
   \                     ??SmoothProcess_2:
   \   000000C4   E022               LDI     R18, 2
   \   000000C6   2F48               MOV     R20, R24
   \   000000C8   E050               LDI     R21, 0
   \   000000CA   E006               LDI     R16, 6
   \   000000CC   E010               LDI     R17, 0
   \   000000CE   ........           CALL    ?S_EC_MUL_L02
   \   000000D2   01F8               MOVW    R31:R30, R17:R16
   \   000000D4   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   000000D6   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   000000D8   8323               STD     Z+3, R18
    149                      }
    150                  }
    151                  
    152                  if(smooth[channel].state == UP) //current is smaller than target
   \                     ??SmoothProcess_1:
   \   000000DA   2F48               MOV     R20, R24
   \   000000DC   E050               LDI     R21, 0
   \   000000DE   E006               LDI     R16, 6
   \   000000E0   E010               LDI     R17, 0
   \   000000E2   ........           CALL    ?S_EC_MUL_L02
   \   000000E6   01F8               MOVW    R31:R30, R17:R16
   \   000000E8   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   000000EA   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   000000EC   8103               LDD     R16, Z+3
   \   000000EE   3001               CPI     R16, 1
   \   000000F0   F009               BREQ    $+2+2
   \   000000F2   C05F               RJMP    ??SmoothProcess_3
    153                  {
    154                      if((uint16_t)(smooth[channel].current +
    155                                    smooth[channel].speed) <= SMOOTH_PWM_MAX)  
   \   000000F4   2F48               MOV     R20, R24
   \   000000F6   E050               LDI     R21, 0
   \   000000F8   E006               LDI     R16, 6
   \   000000FA   E010               LDI     R17, 0
   \   000000FC   ........           CALL    ?S_EC_MUL_L02
   \   00000100   01F8               MOVW    R31:R30, R17:R16
   \   00000102   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   00000104   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   00000106   8122               LDD     R18, Z+2
   \   00000108   E030               LDI     R19, 0
   \   0000010A   2F48               MOV     R20, R24
   \   0000010C   E050               LDI     R21, 0
   \   0000010E   E006               LDI     R16, 6
   \   00000110   E010               LDI     R17, 0
   \   00000112   ........           CALL    ?S_EC_MUL_L02
   \   00000116   01F8               MOVW    R31:R30, R17:R16
   \   00000118   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   0000011A   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   0000011C   8100               LD      R16, Z
   \   0000011E   E010               LDI     R17, 0
   \   00000120   0F20               ADD     R18, R16
   \   00000122   1F31               ADC     R19, R17
   \   00000124   3020               CPI     R18, 0
   \   00000126   E001               LDI     R16, 1
   \   00000128   0730               CPC     R19, R16
   \   0000012A   F4B8               BRCC    ??SmoothProcess_4
    156                          smooth[channel].current += smooth[channel].speed;
   \   0000012C   2F48               MOV     R20, R24
   \   0000012E   E050               LDI     R21, 0
   \   00000130   E006               LDI     R16, 6
   \   00000132   E010               LDI     R17, 0
   \   00000134   ........           CALL    ?S_EC_MUL_L02
   \   00000138   01F8               MOVW    R31:R30, R17:R16
   \   0000013A   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   0000013C   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   0000013E   8120               LD      R18, Z
   \   00000140   2F48               MOV     R20, R24
   \   00000142   E050               LDI     R21, 0
   \   00000144   E006               LDI     R16, 6
   \   00000146   E010               LDI     R17, 0
   \   00000148   ........           CALL    ?S_EC_MUL_L02
   \   0000014C   01F8               MOVW    R31:R30, R17:R16
   \   0000014E   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   00000150   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   00000152   8102               LDD     R16, Z+2
   \   00000154   0F02               ADD     R16, R18
   \   00000156   8302               STD     Z+2, R16
   \   00000158   C00B               RJMP    ??SmoothProcess_5
    157                      else                            
    158                          smooth[channel].current = 255;
   \                     ??SmoothProcess_4:
   \   0000015A   EF2F               LDI     R18, 255
   \   0000015C   2F48               MOV     R20, R24
   \   0000015E   E050               LDI     R21, 0
   \   00000160   E006               LDI     R16, 6
   \   00000162   E010               LDI     R17, 0
   \   00000164   ........           CALL    ?S_EC_MUL_L02
   \   00000168   01F8               MOVW    R31:R30, R17:R16
   \   0000016A   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   0000016C   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   0000016E   8322               STD     Z+2, R18
    159                      
    160                      
    161                      if(smooth[channel].current >= smooth[channel].target) 
   \                     ??SmoothProcess_5:
   \   00000170   2F48               MOV     R20, R24
   \   00000172   E050               LDI     R21, 0
   \   00000174   E006               LDI     R16, 6
   \   00000176   E010               LDI     R17, 0
   \   00000178   ........           CALL    ?S_EC_MUL_L02
   \   0000017C   01F8               MOVW    R31:R30, R17:R16
   \   0000017E   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   00000180   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   00000182   8122               LDD     R18, Z+2
   \   00000184   2F48               MOV     R20, R24
   \   00000186   E050               LDI     R21, 0
   \   00000188   E006               LDI     R16, 6
   \   0000018A   E010               LDI     R17, 0
   \   0000018C   ........           CALL    ?S_EC_MUL_L02
   \   00000190   01F8               MOVW    R31:R30, R17:R16
   \   00000192   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   00000194   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   00000196   8101               LDD     R16, Z+1
   \   00000198   1720               CP      R18, R16
   \   0000019A   F058               BRCS    ??SmoothProcess_3
    162                          smooth[channel].state = WAITING;
   \   0000019C   E020               LDI     R18, 0
   \   0000019E   2F48               MOV     R20, R24
   \   000001A0   E050               LDI     R21, 0
   \   000001A2   E006               LDI     R16, 6
   \   000001A4   E010               LDI     R17, 0
   \   000001A6   ........           CALL    ?S_EC_MUL_L02
   \   000001AA   01F8               MOVW    R31:R30, R17:R16
   \   000001AC   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   000001AE   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   000001B0   8323               STD     Z+3, R18
    163                  }
    164                  
    165                  if(smooth[channel].state == DOWN) //current is bigger than target
   \                     ??SmoothProcess_3:
   \   000001B2   2F48               MOV     R20, R24
   \   000001B4   E050               LDI     R21, 0
   \   000001B6   E006               LDI     R16, 6
   \   000001B8   E010               LDI     R17, 0
   \   000001BA   ........           CALL    ?S_EC_MUL_L02
   \   000001BE   01F8               MOVW    R31:R30, R17:R16
   \   000001C0   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   000001C2   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   000001C4   8103               LDD     R16, Z+3
   \   000001C6   3002               CPI     R16, 2
   \   000001C8   F009               BREQ    $+2+2
   \   000001CA   C059               RJMP    ??SmoothProcess_6
    166                  {
    167                      if(smooth[channel].current > smooth[channel].speed) 
   \   000001CC   2F48               MOV     R20, R24
   \   000001CE   E050               LDI     R21, 0
   \   000001D0   E006               LDI     R16, 6
   \   000001D2   E010               LDI     R17, 0
   \   000001D4   ........           CALL    ?S_EC_MUL_L02
   \   000001D8   01F8               MOVW    R31:R30, R17:R16
   \   000001DA   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   000001DC   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   000001DE   8120               LD      R18, Z
   \   000001E0   2F48               MOV     R20, R24
   \   000001E2   E050               LDI     R21, 0
   \   000001E4   E006               LDI     R16, 6
   \   000001E6   E010               LDI     R17, 0
   \   000001E8   ........           CALL    ?S_EC_MUL_L02
   \   000001EC   01F8               MOVW    R31:R30, R17:R16
   \   000001EE   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   000001F0   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   000001F2   8102               LDD     R16, Z+2
   \   000001F4   1720               CP      R18, R16
   \   000001F6   F4B8               BRCC    ??SmoothProcess_7
    168                          smooth[channel].current -= smooth[channel].speed;
   \   000001F8   2F48               MOV     R20, R24
   \   000001FA   E050               LDI     R21, 0
   \   000001FC   E006               LDI     R16, 6
   \   000001FE   E010               LDI     R17, 0
   \   00000200   ........           CALL    ?S_EC_MUL_L02
   \   00000204   01F8               MOVW    R31:R30, R17:R16
   \   00000206   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   00000208   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   0000020A   8120               LD      R18, Z
   \   0000020C   2F48               MOV     R20, R24
   \   0000020E   E050               LDI     R21, 0
   \   00000210   E006               LDI     R16, 6
   \   00000212   E010               LDI     R17, 0
   \   00000214   ........           CALL    ?S_EC_MUL_L02
   \   00000218   01F8               MOVW    R31:R30, R17:R16
   \   0000021A   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   0000021C   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   0000021E   8102               LDD     R16, Z+2
   \   00000220   1B02               SUB     R16, R18
   \   00000222   8302               STD     Z+2, R16
   \   00000224   C00B               RJMP    ??SmoothProcess_8
    169                      else 
    170                          smooth[channel].current = 0;
   \                     ??SmoothProcess_7:
   \   00000226   E020               LDI     R18, 0
   \   00000228   2F48               MOV     R20, R24
   \   0000022A   E050               LDI     R21, 0
   \   0000022C   E006               LDI     R16, 6
   \   0000022E   E010               LDI     R17, 0
   \   00000230   ........           CALL    ?S_EC_MUL_L02
   \   00000234   01F8               MOVW    R31:R30, R17:R16
   \   00000236   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   00000238   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   0000023A   8322               STD     Z+2, R18
    171                      
    172                      
    173                      if(smooth[channel].current <= smooth[channel].target) 
   \                     ??SmoothProcess_8:
   \   0000023C   2F48               MOV     R20, R24
   \   0000023E   E050               LDI     R21, 0
   \   00000240   E006               LDI     R16, 6
   \   00000242   E010               LDI     R17, 0
   \   00000244   ........           CALL    ?S_EC_MUL_L02
   \   00000248   01F8               MOVW    R31:R30, R17:R16
   \   0000024A   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   0000024C   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   0000024E   8121               LDD     R18, Z+1
   \   00000250   2F48               MOV     R20, R24
   \   00000252   E050               LDI     R21, 0
   \   00000254   E006               LDI     R16, 6
   \   00000256   E010               LDI     R17, 0
   \   00000258   ........           CALL    ?S_EC_MUL_L02
   \   0000025C   01F8               MOVW    R31:R30, R17:R16
   \   0000025E   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   00000260   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   00000262   8102               LDD     R16, Z+2
   \   00000264   1720               CP      R18, R16
   \   00000266   F058               BRCS    ??SmoothProcess_6
    174                          smooth[channel].state = WAITING;   
   \   00000268   E020               LDI     R18, 0
   \   0000026A   2F48               MOV     R20, R24
   \   0000026C   E050               LDI     R21, 0
   \   0000026E   E006               LDI     R16, 6
   \   00000270   E010               LDI     R17, 0
   \   00000272   ........           CALL    ?S_EC_MUL_L02
   \   00000276   01F8               MOVW    R31:R30, R17:R16
   \   00000278   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   0000027A   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   0000027C   8323               STD     Z+3, R18
    175                  }
    176                  
    177                  //set waiting time
    178                  smooth[channel].waitTimer = pSettings->pGetWaitTime(channel);   
   \                     ??SmoothProcess_6:
   \   0000027E   2F08               MOV     R16, R24
   \   00000280   01FD               MOVW    R31:R30, R27:R26
   \   00000282   8124               LDD     R18, Z+4
   \   00000284   8135               LDD     R19, Z+5
   \   00000286   01F9               MOVW    R31:R30, R19:R18
   \   00000288   9509               ICALL
   \   0000028A   0198               MOVW    R19:R18, R17:R16
   \   0000028C   2F48               MOV     R20, R24
   \   0000028E   E050               LDI     R21, 0
   \   00000290   E006               LDI     R16, 6
   \   00000292   E010               LDI     R17, 0
   \   00000294   ........           CALL    ?S_EC_MUL_L02
   \   00000298   01F8               MOVW    R31:R30, R17:R16
   \   0000029A   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   0000029C   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   0000029E   8324               STD     Z+4, R18
   \   000002A0   8335               STD     Z+5, R19
    179              }
    180          }
   \                     ??SmoothProcess_0:
   \   000002A2   E0E4               LDI     R30, 4
   \   000002A4   ........           JMP     ?EPILOGUE_B4_L09
    181          
    182          
    183          /*******************************************************************************
    184          * Function Name  : GetSmoothCurrent
    185          * Description    : Return current bright value
    186          * Input          : Channel
    187          * Return         : Current bright value
    188          *******************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    189          uint8_t GetSmoothCurrent(uint8_t channel)
   \                     GetSmoothCurrent:
    190          {
    191              return smooth[channel].current; 
   \   00000000   2F40               MOV     R20, R16
   \   00000002   E050               LDI     R21, 0
   \   00000004   E006               LDI     R16, 6
   \   00000006   E010               LDI     R17, 0
   \   00000008   ........           CALL    ?S_EC_MUL_L02
   \   0000000C   01F8               MOVW    R31:R30, R17:R16
   \   0000000E   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   00000010   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   00000012   8102               LDD     R16, Z+2
   \   00000014   9508               RET
    192          }
    193          
    194          
    195          
    196          
    197          /*============================================================================*/
    198          /*====================== FIRE MODE ===========================================*/
    199          /*============================================================================*/
    200          /*******************************************************************************
    201          * Function Name  : FireBL
    202          * Description    : Fire mode backlight
    203          *******************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    204          void FireBL()	
   \                     FireBL:
    205          {    
   \   00000000   ........           CALL    ?PROLOGUE4_L09
    206              for(uint8_t i=0; i<6; i++)
   \   00000004   E080               LDI     R24, 0
   \   00000006   C036               RJMP    ??FireBL_0
    207              {
    208                  if(smooth[i].waitTimer == 0)
   \                     ??FireBL_1:
   \   00000008   2F48               MOV     R20, R24
   \   0000000A   E050               LDI     R21, 0
   \   0000000C   E006               LDI     R16, 6
   \   0000000E   E010               LDI     R17, 0
   \   00000010   ........           CALL    ?S_EC_MUL_L02
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   00000018   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   0000001A   8104               LDD     R16, Z+4
   \   0000001C   8115               LDD     R17, Z+5
   \   0000001E   2B01               OR      R16, R17
   \   00000020   F4E9               BRNE    ??FireBL_2
    209                  {
    210                      outG[i] = outR[i] / (RandomGet4()%25+8);
   \   00000022   E090               LDI     R25, 0
   \   00000024   01FC               MOVW    R31:R30, R25:R24
   \   00000026   ....               SUBI    R30, LOW((-(outR) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(outR) & 0xFFFF) >> 8
   \   0000002A   8100               LD      R16, Z
   \   0000002C   E010               LDI     R17, 0
   \   0000002E   01D8               MOVW    R27:R26, R17:R16
   \   00000030   ........           CALL    RandomGet4
   \   00000034   E149               LDI     R20, 25
   \   00000036   E050               LDI     R21, 0
   \   00000038   ........           CALL    ?US_DIVMOD_L02
   \   0000003C   5F48               SUBI    R20, 248
   \   0000003E   4F5F               SBCI    R21, 255
   \   00000040   018D               MOVW    R17:R16, R27:R26
   \   00000042   ........           CALL    ?US_DIVMOD_L02
   \   00000046   E090               LDI     R25, 0
   \   00000048   01FC               MOVW    R31:R30, R25:R24
   \   0000004A   ....               SUBI    R30, LOW((-(outG) & 0xFFFF))
   \   0000004C   ....               SBCI    R31, (-(outG) & 0xFFFF) >> 8
   \   0000004E   8300               ST      Z, R16
    211                      outB[i] = 0;
   \   00000050   E000               LDI     R16, 0
   \   00000052   E090               LDI     R25, 0
   \   00000054   01FC               MOVW    R31:R30, R25:R24
   \   00000056   ....               SUBI    R30, LOW((-(outB) & 0xFFFF))
   \   00000058   ....               SBCI    R31, (-(outB) & 0xFFFF) >> 8
   \   0000005A   8300               ST      Z, R16
    212                  }
    213                  
    214                  SmoothProcess(i, &sFire);
   \                     ??FireBL_2:
   \   0000005C   ....               LDI     R18, LOW(sFire)
   \   0000005E   ....               LDI     R19, (sFire) >> 8
   \   00000060   2F08               MOV     R16, R24
   \   00000062   ....               RCALL   SmoothProcess
    215                  outR[i] = GetSmoothCurrent(i);
   \   00000064   2F08               MOV     R16, R24
   \   00000066   ....               RCALL   GetSmoothCurrent
   \   00000068   E090               LDI     R25, 0
   \   0000006A   01FC               MOVW    R31:R30, R25:R24
   \   0000006C   ....               SUBI    R30, LOW((-(outR) & 0xFFFF))
   \   0000006E   ....               SBCI    R31, (-(outR) & 0xFFFF) >> 8
   \   00000070   8300               ST      Z, R16
    216              }    
   \   00000072   9583               INC     R24
   \                     ??FireBL_0:
   \   00000074   3086               CPI     R24, 6
   \   00000076   F240               BRCS    ??FireBL_1
    217          }
   \   00000078   E0E4               LDI     R30, 4
   \   0000007A   ........           JMP     ?EPILOGUE_B4_L09
    218          
    219          /*******************************************************************************
    220          * Function Name  : GiveTargetBLFire
    221          * Input          : Channel
    222          * Return         : Target value
    223          *******************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    224          uint8_t GiveTargetBLFire(uint8_t channel) //set color for Fire Mode
   \                     GiveTargetBLFire:
    225          {
    226              return RandomGet4()%230+25;
   \   00000000   ........           CALL    RandomGet4
   \   00000004   EE46               LDI     R20, 230
   \   00000006   E050               LDI     R21, 0
   \   00000008   ........           CALL    ?US_DIVMOD_L02
   \   0000000C   2F04               MOV     R16, R20
   \   0000000E   5E07               SUBI    R16, 231
   \   00000010   9508               RET
    227          }
    228          
    229          /*******************************************************************************
    230          * Function Name  : GiveSpeedBLFire
    231          * Input          : Channel
    232          * Return         : Speed value
    233          *******************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    234          uint8_t GiveSpeedBLFire(uint8_t channel) //set speed for Fire Mode
   \                     GiveSpeedBLFire:
    235          {
    236              return RandomGet()%3+1;
   \   00000000   ........           CALL    RandomGet
   \   00000004   E043               LDI     R20, 3
   \   00000006   E050               LDI     R21, 0
   \   00000008   ........           CALL    ?US_DIVMOD_L02
   \   0000000C   2F04               MOV     R16, R20
   \   0000000E   9503               INC     R16
   \   00000010   9508               RET
    237          }
    238          
    239          /*******************************************************************************
    240          * Function Name  : GiveWaitBLFire
    241          * Input          : Channel
    242          * Return         : Wait time value
    243          *******************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    244          uint16_t GiveWaitBLFire(uint8_t channel)
   \                     GiveWaitBLFire:
    245          {
   \   00000000   2F40               MOV     R20, R16
    246              if(smooth[channel].current< 120 && smooth[channel].state == DOWN)  
   \   00000002   E050               LDI     R21, 0
   \   00000004   E006               LDI     R16, 6
   \   00000006   E010               LDI     R17, 0
   \   00000008   ........           CALL    ?S_EC_MUL_L02
   \   0000000C   01F8               MOVW    R31:R30, R17:R16
   \   0000000E   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   00000010   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   00000012   8102               LDD     R16, Z+2
   \   00000014   3708               CPI     R16, 120
   \   00000016   F4A8               BRCC    ??GiveWaitBLFire_0
   \   00000018   E050               LDI     R21, 0
   \   0000001A   E006               LDI     R16, 6
   \   0000001C   E010               LDI     R17, 0
   \   0000001E   ........           CALL    ?S_EC_MUL_L02
   \   00000022   01F8               MOVW    R31:R30, R17:R16
   \   00000024   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   00000026   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   00000028   8103               LDD     R16, Z+3
   \   0000002A   3002               CPI     R16, 2
   \   0000002C   F451               BRNE    ??GiveWaitBLFire_0
    247                  return RandomGet()%10+4;
   \   0000002E   ........           CALL    RandomGet
   \   00000032   E04A               LDI     R20, 10
   \   00000034   E050               LDI     R21, 0
   \   00000036   ........           CALL    ?US_DIVMOD_L02
   \   0000003A   018A               MOVW    R17:R16, R21:R20
   \   0000003C   5F0C               SUBI    R16, 252
   \   0000003E   4F1F               SBCI    R17, 255
   \   00000040   9508               RET
    248              else                       
    249                  return RandomGet()%7+2;  
   \                     ??GiveWaitBLFire_0:
   \   00000042   ........           CALL    RandomGet
   \   00000046   E047               LDI     R20, 7
   \   00000048   E050               LDI     R21, 0
   \   0000004A   ........           CALL    ?US_DIVMOD_L02
   \   0000004E   018A               MOVW    R17:R16, R21:R20
   \   00000050   5F0E               SUBI    R16, 254
   \   00000052   4F1F               SBCI    R17, 255
   \   00000054   9508               RET
    250          }   
    251          
    252          
    253          
    254          
    255          /*============================================================================*/
    256          /*====================== Random - All have one color =========================*/
    257          /*============================================================================*/
    258          /*******************************************************************************
    259          * Function Name  : RandomAllBL
    260          * Description    : 
    261          *******************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    262          void RandomAllBL()
   \                     RandomAllBL:
    263          {
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
    264              for(uint8_t i=0; i<3; i++)
   \   00000004   E080               LDI     R24, 0
   \   00000006   C005               RJMP    ??RandomAllBL_0
    265                  SmoothProcess(i, &sRandomAll);
   \                     ??RandomAllBL_1:
   \   00000008   ....               LDI     R18, LOW(sRandomAll)
   \   0000000A   ....               LDI     R19, (sRandomAll) >> 8
   \   0000000C   2F08               MOV     R16, R24
   \   0000000E   ....               RCALL   SmoothProcess
   \   00000010   9583               INC     R24
   \                     ??RandomAllBL_0:
   \   00000012   3083               CPI     R24, 3
   \   00000014   F3C8               BRCS    ??RandomAllBL_1
    266              
    267              for(uint8_t i=0; i<6; i++)
   \   00000016   E080               LDI     R24, 0
   \   00000018   C016               RJMP    ??RandomAllBL_2
    268              {
    269                  outR[i] = GetSmoothCurrent(0);
   \                     ??RandomAllBL_3:
   \   0000001A   E000               LDI     R16, 0
   \   0000001C   ....               RCALL   GetSmoothCurrent
   \   0000001E   E090               LDI     R25, 0
   \   00000020   01FC               MOVW    R31:R30, R25:R24
   \   00000022   ....               SUBI    R30, LOW((-(outR) & 0xFFFF))
   \   00000024   ....               SBCI    R31, (-(outR) & 0xFFFF) >> 8
   \   00000026   8300               ST      Z, R16
    270                  outG[i] = GetSmoothCurrent(1);
   \   00000028   E001               LDI     R16, 1
   \   0000002A   ....               RCALL   GetSmoothCurrent
   \   0000002C   E090               LDI     R25, 0
   \   0000002E   01FC               MOVW    R31:R30, R25:R24
   \   00000030   ....               SUBI    R30, LOW((-(outG) & 0xFFFF))
   \   00000032   ....               SBCI    R31, (-(outG) & 0xFFFF) >> 8
   \   00000034   8300               ST      Z, R16
    271                  outB[i] = GetSmoothCurrent(2);
   \   00000036   E002               LDI     R16, 2
   \   00000038   ....               RCALL   GetSmoothCurrent
   \   0000003A   E090               LDI     R25, 0
   \   0000003C   01FC               MOVW    R31:R30, R25:R24
   \   0000003E   ....               SUBI    R30, LOW((-(outB) & 0xFFFF))
   \   00000040   ....               SBCI    R31, (-(outB) & 0xFFFF) >> 8
   \   00000042   8300               ST      Z, R16
    272              }
   \   00000044   9583               INC     R24
   \                     ??RandomAllBL_2:
   \   00000046   3086               CPI     R24, 6
   \   00000048   F340               BRCS    ??RandomAllBL_3
    273          }
   \   0000004A   9189               LD      R24, Y+
   \   0000004C   9199               LD      R25, Y+
   \   0000004E   9508               RET
    274          
    275          /*******************************************************************************
    276          * Function Name  : GiveTargetBLRandAll
    277          * Input          : Channel
    278          * Return         : Target value
    279          *******************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    280          uint8_t GiveTargetBLRandAll(uint8_t channel)
   \                     GiveTargetBLRandAll:
    281          {
    282              static uint8_t R=0, G=0, B=0;
    283              
    284              if(channel == 0)
   \   00000000   2300               TST     R16
   \   00000002   F489               BRNE    ??GiveTargetBLRandAll_0
    285              {
    286                  HSVtoRGB(&R, &G, &B , (RandomGet4() % 360));
   \   00000004   ........           CALL    RandomGet4
   \   00000008   E648               LDI     R20, 104
   \   0000000A   E051               LDI     R21, 1
   \   0000000C   ........           CALL    ?US_DIVMOD_L02
   \   00000010   01BA               MOVW    R23:R22, R21:R20
   \   00000012   ....               LDI     R20, LOW(??B)
   \   00000014   ....               LDI     R21, (??B) >> 8
   \   00000016   ....               LDI     R18, LOW(??G)
   \   00000018   ....               LDI     R19, (??G) >> 8
   \   0000001A   ....               LDI     R16, LOW(??R)
   \   0000001C   ....               LDI     R17, (??R) >> 8
   \   0000001E   ....               RCALL   HSVtoRGB
    287                  return R;
   \   00000020   9100....           LDS     R16, ??R
   \   00000024   9508               RET
    288              }
    289              if(channel == 1) return G;
   \                     ??GiveTargetBLRandAll_0:
   \   00000026   3001               CPI     R16, 1
   \   00000028   F419               BRNE    ??GiveTargetBLRandAll_1
   \   0000002A   9100....           LDS     R16, ??G
   \   0000002E   9508               RET
    290              if(channel == 2) return B;
   \                     ??GiveTargetBLRandAll_1:
   \   00000030   3002               CPI     R16, 2
   \   00000032   F419               BRNE    ??GiveTargetBLRandAll_2
   \   00000034   9100....           LDS     R16, ??B
   \   00000038   9508               RET
    291              
    292              return 1;
   \                     ??GiveTargetBLRandAll_2:
   \   0000003A   E001               LDI     R16, 1
   \   0000003C   9508               RET
    293          }

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??R:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??G:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??B:
   \   00000000                      DS8 1
    294          
    295          /*******************************************************************************
    296          * Function Name  : GiveSpeedBLRandAll
    297          * Input          : Channel
    298          * Return         : Speed value
    299          *******************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    300          uint8_t GiveSpeedBLRandAll(uint8_t channel)
   \                     GiveSpeedBLRandAll:
    301          {
    302              return 1;
   \   00000000   E001               LDI     R16, 1
   \   00000002   9508               RET
    303          }
    304          
    305          /*******************************************************************************
    306          * Function Name  : GiveWaitBLRandAll
    307          * Input          : Channel
    308          * Return         : Wait time value
    309          *******************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    310          uint16_t GiveWaitBLRandAll(uint8_t channel)
   \                     GiveWaitBLRandAll:
    311          {
    312              return ((RandomGet4() % 250)+100);
   \   00000000   ........           CALL    RandomGet4
   \   00000004   EF4A               LDI     R20, 250
   \   00000006   E050               LDI     R21, 0
   \   00000008   ........           CALL    ?US_DIVMOD_L02
   \   0000000C   018A               MOVW    R17:R16, R21:R20
   \   0000000E   590C               SUBI    R16, 156
   \   00000010   4F1F               SBCI    R17, 255
   \   00000012   9508               RET
    313          }
    314          
    315          
    316          
    317          
    318          /*============================================================================*/
    319          /*==================== Random - Each have it's own color =====================*/
    320          /*============================================================================*/
    321          /*******************************************************************************
    322          * Function Name  : RandomEachBL
    323          * Description    : RandomEach - random each - 6 different colors
    324                           : max execute time - 1.585ms
    325                           : mix execute time - 0.119ms
    326          *******************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    327          void RandomEachBL()
   \                     RandomEachBL:
    328          {
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
    329              for(uint8_t i=0; i<18; i++)
   \   00000004   E080               LDI     R24, 0
   \   00000006   C009               RJMP    ??RandomEachBL_0
    330                  SmoothProcess(RandomChannelEachBL[i], &sRandomEach);
   \                     ??RandomEachBL_1:
   \   00000008   ....               LDI     R18, LOW(sRandomEach)
   \   0000000A   ....               LDI     R19, (sRandomEach) >> 8
   \   0000000C   E090               LDI     R25, 0
   \   0000000E   01FC               MOVW    R31:R30, R25:R24
   \   00000010   ....               SUBI    R30, LOW((-(RandomChannelEachBL) & 0xFFFF))
   \   00000012   ....               SBCI    R31, (-(RandomChannelEachBL) & 0xFFFF) >> 8
   \   00000014   9104               LPM     R16, Z
   \   00000016   ....               RCALL   SmoothProcess
   \   00000018   9583               INC     R24
   \                     ??RandomEachBL_0:
   \   0000001A   3182               CPI     R24, 18
   \   0000001C   F3A8               BRCS    ??RandomEachBL_1
    331              
    332              for(uint8_t i=0; i<6; i++)
   \   0000001E   E080               LDI     R24, 0
   \   00000020   C01E               RJMP    ??RandomEachBL_2
    333              {
    334                  outR[i] = GetSmoothCurrent(3*i+0);
   \                     ??RandomEachBL_3:
   \   00000022   E003               LDI     R16, 3
   \   00000024   9F80               MUL     R24, R16
   \   00000026   2D00               MOV     R16, R0
   \   00000028   ....               RCALL   GetSmoothCurrent
   \   0000002A   E090               LDI     R25, 0
   \   0000002C   01FC               MOVW    R31:R30, R25:R24
   \   0000002E   ....               SUBI    R30, LOW((-(outR) & 0xFFFF))
   \   00000030   ....               SBCI    R31, (-(outR) & 0xFFFF) >> 8
   \   00000032   8300               ST      Z, R16
    335                  outG[i] = GetSmoothCurrent(3*i+1);
   \   00000034   E003               LDI     R16, 3
   \   00000036   9F80               MUL     R24, R16
   \   00000038   2D00               MOV     R16, R0
   \   0000003A   9503               INC     R16
   \   0000003C   ....               RCALL   GetSmoothCurrent
   \   0000003E   E090               LDI     R25, 0
   \   00000040   01FC               MOVW    R31:R30, R25:R24
   \   00000042   ....               SUBI    R30, LOW((-(outG) & 0xFFFF))
   \   00000044   ....               SBCI    R31, (-(outG) & 0xFFFF) >> 8
   \   00000046   8300               ST      Z, R16
    336                  outB[i] = GetSmoothCurrent(3*i+2);
   \   00000048   E003               LDI     R16, 3
   \   0000004A   9F80               MUL     R24, R16
   \   0000004C   2D00               MOV     R16, R0
   \   0000004E   5F0E               SUBI    R16, 254
   \   00000050   ....               RCALL   GetSmoothCurrent
   \   00000052   E090               LDI     R25, 0
   \   00000054   01FC               MOVW    R31:R30, R25:R24
   \   00000056   ....               SUBI    R30, LOW((-(outB) & 0xFFFF))
   \   00000058   ....               SBCI    R31, (-(outB) & 0xFFFF) >> 8
   \   0000005A   8300               ST      Z, R16
    337              }   
   \   0000005C   9583               INC     R24
   \                     ??RandomEachBL_2:
   \   0000005E   3086               CPI     R24, 6
   \   00000060   F300               BRCS    ??RandomEachBL_3
    338          }
   \   00000062   9189               LD      R24, Y+
   \   00000064   9199               LD      R25, Y+
   \   00000066   9508               RET
    339          
    340          /*******************************************************************************
    341          * Function Name  : GiveTargetBLRandEach
    342          * Input          : Channel
    343          * Return         : Target value
    344          *******************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    345          uint8_t GiveTargetBLRandEach(uint8_t channel)
   \                     GiveTargetBLRandEach:
    346          {    
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   2E40               MOV     R4, R16
    347              static uint8_t R[6], G[6], B[6];
    348              
    349              if(channel%3 == 0)
   \   00000006   E043               LDI     R20, 3
   \   00000008   2D04               MOV     R16, R4
   \   0000000A   ........           CALL    ?UC_DIVMOD_L01
   \   0000000E   2344               TST     R20
   \   00000010   F5D1               BRNE    ??GiveTargetBLRandEach_0
    350              {
    351                  HSVtoRGB(&R[channel/3], &G[channel/3], &B[channel/3] , (RandomGet4() % 360));
   \   00000012   ........           CALL    RandomGet4
   \   00000016   E648               LDI     R20, 104
   \   00000018   E051               LDI     R21, 1
   \   0000001A   ........           CALL    ?US_DIVMOD_L02
   \   0000001E   01BA               MOVW    R23:R22, R21:R20
   \   00000020   01CB               MOVW    R25:R24, R23:R22
   \   00000022   E043               LDI     R20, 3
   \   00000024   2D04               MOV     R16, R4
   \   00000026   ........           CALL    ?UC_DIVMOD_L01
   \   0000002A   E010               LDI     R17, 0
   \   0000002C   ....               LDI     R20, LOW(??B_1)
   \   0000002E   ....               LDI     R21, (??B_1) >> 8
   \   00000030   0F40               ADD     R20, R16
   \   00000032   1F51               ADC     R21, R17
   \   00000034   01BC               MOVW    R23:R22, R25:R24
   \   00000036   01CA               MOVW    R25:R24, R21:R20
   \   00000038   01DB               MOVW    R27:R26, R23:R22
   \   0000003A   E043               LDI     R20, 3
   \   0000003C   2D04               MOV     R16, R4
   \   0000003E   ........           CALL    ?UC_DIVMOD_L01
   \   00000042   E010               LDI     R17, 0
   \   00000044   ....               LDI     R18, LOW(??G_1)
   \   00000046   ....               LDI     R19, (??G_1) >> 8
   \   00000048   0F20               ADD     R18, R16
   \   0000004A   1F31               ADC     R19, R17
   \   0000004C   01BD               MOVW    R23:R22, R27:R26
   \   0000004E   01AC               MOVW    R21:R20, R25:R24
   \   00000050   01C9               MOVW    R25:R24, R19:R18
   \   00000052   01DA               MOVW    R27:R26, R21:R20
   \   00000054   013B               MOVW    R7:R6, R23:R22
   \   00000056   E043               LDI     R20, 3
   \   00000058   2D04               MOV     R16, R4
   \   0000005A   ........           CALL    ?UC_DIVMOD_L01
   \   0000005E   2F20               MOV     R18, R16
   \   00000060   E030               LDI     R19, 0
   \   00000062   ....               LDI     R16, LOW(??R_1)
   \   00000064   ....               LDI     R17, (??R_1) >> 8
   \   00000066   0F02               ADD     R16, R18
   \   00000068   1F13               ADC     R17, R19
   \   0000006A   01B3               MOVW    R23:R22, R7:R6
   \   0000006C   01AD               MOVW    R21:R20, R27:R26
   \   0000006E   019C               MOVW    R19:R18, R25:R24
   \   00000070   ....               RCALL   HSVtoRGB
    352                  return R[channel/3];
   \   00000072   E043               LDI     R20, 3
   \   00000074   2D04               MOV     R16, R4
   \   00000076   ........           CALL    ?UC_DIVMOD_L01
   \   0000007A   E010               LDI     R17, 0
   \   0000007C   01F8               MOVW    R31:R30, R17:R16
   \   0000007E   ....               SUBI    R30, LOW((-(??R_1) & 0xFFFF))
   \   00000080   ....               SBCI    R31, (-(??R_1) & 0xFFFF) >> 8
   \   00000082   8100               LD      R16, Z
   \   00000084   C021               RJMP    ??GiveTargetBLRandEach_1
    353              }
    354              if(channel%3 == 1) return G[channel/3];
   \                     ??GiveTargetBLRandEach_0:
   \   00000086   E043               LDI     R20, 3
   \   00000088   2D04               MOV     R16, R4
   \   0000008A   ........           CALL    ?UC_DIVMOD_L01
   \   0000008E   3041               CPI     R20, 1
   \   00000090   F451               BRNE    ??GiveTargetBLRandEach_2
   \   00000092   E043               LDI     R20, 3
   \   00000094   2D04               MOV     R16, R4
   \   00000096   ........           CALL    ?UC_DIVMOD_L01
   \   0000009A   E010               LDI     R17, 0
   \   0000009C   01F8               MOVW    R31:R30, R17:R16
   \   0000009E   ....               SUBI    R30, LOW((-(??G_1) & 0xFFFF))
   \   000000A0   ....               SBCI    R31, (-(??G_1) & 0xFFFF) >> 8
   \   000000A2   8100               LD      R16, Z
   \   000000A4   C011               RJMP    ??GiveTargetBLRandEach_1
    355              if(channel%3 == 2) return B[channel/3];
   \                     ??GiveTargetBLRandEach_2:
   \   000000A6   E043               LDI     R20, 3
   \   000000A8   2D04               MOV     R16, R4
   \   000000AA   ........           CALL    ?UC_DIVMOD_L01
   \   000000AE   3042               CPI     R20, 2
   \   000000B0   F451               BRNE    ??GiveTargetBLRandEach_3
   \   000000B2   E043               LDI     R20, 3
   \   000000B4   2D04               MOV     R16, R4
   \   000000B6   ........           CALL    ?UC_DIVMOD_L01
   \   000000BA   E010               LDI     R17, 0
   \   000000BC   01F8               MOVW    R31:R30, R17:R16
   \   000000BE   ....               SUBI    R30, LOW((-(??B_1) & 0xFFFF))
   \   000000C0   ....               SBCI    R31, (-(??B_1) & 0xFFFF) >> 8
   \   000000C2   8100               LD      R16, Z
   \   000000C4   C001               RJMP    ??GiveTargetBLRandEach_1
    356              
    357              return 1;
   \                     ??GiveTargetBLRandEach_3:
   \   000000C6   E001               LDI     R16, 1
   \                     ??GiveTargetBLRandEach_1:
   \   000000C8   E0E8               LDI     R30, 8
   \   000000CA   ........           JMP     ?EPILOGUE_B8_L09
    358              
    359          }

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??R_1:
   \   00000000                      DS8 6

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??G_1:
   \   00000000                      DS8 6

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??B_1:
   \   00000000                      DS8 6
    360          
    361          /*******************************************************************************
    362          * Function Name  : GiveSpeedBLRandEach
    363          * Input          : Channel
    364          * Return         : Speed value
    365          *******************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    366          uint8_t GiveSpeedBLRandEach(uint8_t channel)
   \                     GiveSpeedBLRandEach:
    367          {
    368              return RandomGet()%5+1;
   \   00000000   ........           CALL    RandomGet
   \   00000004   E045               LDI     R20, 5
   \   00000006   E050               LDI     R21, 0
   \   00000008   ........           CALL    ?US_DIVMOD_L02
   \   0000000C   2F04               MOV     R16, R20
   \   0000000E   9503               INC     R16
   \   00000010   9508               RET
    369          }
    370          
    371          /*******************************************************************************
    372          * Function Name  : GiveWaitBLRandEach
    373          * Input          : Channel
    374          * Return         : Wait time value
    375          *******************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    376          uint16_t GiveWaitBLRandEach(uint8_t channel)
   \                     GiveWaitBLRandEach:
    377          {
    378              return ((RandomGet4() % 50)+20); // 700 - 20
   \   00000000   ........           CALL    RandomGet4
   \   00000004   E342               LDI     R20, 50
   \   00000006   E050               LDI     R21, 0
   \   00000008   ........           CALL    ?US_DIVMOD_L02
   \   0000000C   018A               MOVW    R17:R16, R21:R20
   \   0000000E   5E0C               SUBI    R16, 236
   \   00000010   4F1F               SBCI    R17, 255
   \   00000012   9508               RET
    379          }
    380          
    381          
    382          
    383          
    384          /*============================================================================*/
    385          /*============= SHIFT MODE - new color appear from left ======================*/
    386          /*============================================================================*/
    387          /*******************************************************************************
    388          * Function Name  : ShiftBL
    389          * Description    : Shift colors - from left to right - new color appear from left
    390          *******************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    391          void ShiftBL()
   \                     ShiftBL:
    392          {
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
    393               for(uint8_t i=0; i<18; i++)
   \   00000004   E080               LDI     R24, 0
   \   00000006   C005               RJMP    ??ShiftBL_0
    394                  SmoothProcess(i, &sShift);   
   \                     ??ShiftBL_1:
   \   00000008   ....               LDI     R18, LOW(sShift)
   \   0000000A   ....               LDI     R19, (sShift) >> 8
   \   0000000C   2F08               MOV     R16, R24
   \   0000000E   ....               RCALL   SmoothProcess
   \   00000010   9583               INC     R24
   \                     ??ShiftBL_0:
   \   00000012   3182               CPI     R24, 18
   \   00000014   F3C8               BRCS    ??ShiftBL_1
    395               
    396               for(uint8_t i=0; i<6; i++)    
   \   00000016   E080               LDI     R24, 0
   \   00000018   C01E               RJMP    ??ShiftBL_2
    397               {
    398                   outR[i] = GetSmoothCurrent(3*i+0);
   \                     ??ShiftBL_3:
   \   0000001A   E003               LDI     R16, 3
   \   0000001C   9F80               MUL     R24, R16
   \   0000001E   2D00               MOV     R16, R0
   \   00000020   ....               RCALL   GetSmoothCurrent
   \   00000022   E090               LDI     R25, 0
   \   00000024   01FC               MOVW    R31:R30, R25:R24
   \   00000026   ....               SUBI    R30, LOW((-(outR) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(outR) & 0xFFFF) >> 8
   \   0000002A   8300               ST      Z, R16
    399                   outG[i] = GetSmoothCurrent(3*i+1);
   \   0000002C   E003               LDI     R16, 3
   \   0000002E   9F80               MUL     R24, R16
   \   00000030   2D00               MOV     R16, R0
   \   00000032   9503               INC     R16
   \   00000034   ....               RCALL   GetSmoothCurrent
   \   00000036   E090               LDI     R25, 0
   \   00000038   01FC               MOVW    R31:R30, R25:R24
   \   0000003A   ....               SUBI    R30, LOW((-(outG) & 0xFFFF))
   \   0000003C   ....               SBCI    R31, (-(outG) & 0xFFFF) >> 8
   \   0000003E   8300               ST      Z, R16
    400                   outB[i] = GetSmoothCurrent(3*i+2);
   \   00000040   E003               LDI     R16, 3
   \   00000042   9F80               MUL     R24, R16
   \   00000044   2D00               MOV     R16, R0
   \   00000046   5F0E               SUBI    R16, 254
   \   00000048   ....               RCALL   GetSmoothCurrent
   \   0000004A   E090               LDI     R25, 0
   \   0000004C   01FC               MOVW    R31:R30, R25:R24
   \   0000004E   ....               SUBI    R30, LOW((-(outB) & 0xFFFF))
   \   00000050   ....               SBCI    R31, (-(outB) & 0xFFFF) >> 8
   \   00000052   8300               ST      Z, R16
    401               }
   \   00000054   9583               INC     R24
   \                     ??ShiftBL_2:
   \   00000056   3086               CPI     R24, 6
   \   00000058   F300               BRCS    ??ShiftBL_3
    402          }
   \   0000005A   9189               LD      R24, Y+
   \   0000005C   9199               LD      R25, Y+
   \   0000005E   9508               RET
    403          
    404          /*******************************************************************************
    405          * Function Name  : GiveTargetBLShift
    406          * Input          : Channel
    407          * Return         : Target value
    408          *******************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    409          uint8_t GiveTargetBLShift(uint8_t channel)
   \                     GiveTargetBLShift:
    410          {
   \   00000000   938A               ST      -Y, R24
   \   00000002   9723               SBIW    R29:R28, 3
   \   00000004   2F80               MOV     R24, R16
    411              uint8_t tempR=0, tempG=0, tempB=0;
   \   00000006   E000               LDI     R16, 0
   \   00000008   830A               STD     Y+2, R16
   \   0000000A   E000               LDI     R16, 0
   \   0000000C   8309               STD     Y+1, R16
   \   0000000E   E000               LDI     R16, 0
   \   00000010   8308               ST      Y, R16
    412              static uint16_t cnt=0;
    413              
    414              if(channel == 0) cnt++;
   \   00000012   2388               TST     R24
   \   00000014   F441               BRNE    ??GiveTargetBLShift_0
   \   00000016   ....               LDI     R30, LOW(??cnt)
   \   00000018   ....               LDI     R31, (??cnt) >> 8
   \   0000001A   8100               LD      R16, Z
   \   0000001C   8111               LDD     R17, Z+1
   \   0000001E   5F0F               SUBI    R16, 255
   \   00000020   4F1F               SBCI    R17, 255
   \   00000022   8300               ST      Z, R16
   \   00000024   8311               STD     Z+1, R17
    415                  
    416              if(cnt >= 500)
   \                     ??GiveTargetBLShift_0:
   \   00000026   9100....           LDS     R16, ??cnt
   \   0000002A   9110....           LDS     R17, (??cnt + 1)
   \   0000002E   3F04               CPI     R16, 244
   \   00000030   E021               LDI     R18, 1
   \   00000032   0712               CPC     R17, R18
   \   00000034   F1A8               BRCS    ??GiveTargetBLShift_1
    417              {
    418                  cnt = 0;
   \   00000036   E000               LDI     R16, 0
   \   00000038   E010               LDI     R17, 0
   \   0000003A   9300....           STS     ??cnt, R16
   \   0000003E   9310....           STS     (??cnt + 1), R17
    419                  
    420                  HSVtoRGB(&tempR, &tempG, &tempB, RandomGet4()%360);
   \   00000042   ........           CALL    RandomGet4
   \   00000046   E648               LDI     R20, 104
   \   00000048   E051               LDI     R21, 1
   \   0000004A   ........           CALL    ?US_DIVMOD_L02
   \   0000004E   01BA               MOVW    R23:R22, R21:R20
   \   00000050   01AE               MOVW    R21:R20, R29:R28
   \   00000052   019E               MOVW    R19:R18, R29:R28
   \   00000054   5F2F               SUBI    R18, 255
   \   00000056   4F3F               SBCI    R19, 255
   \   00000058   018E               MOVW    R17:R16, R29:R28
   \   0000005A   5F0E               SUBI    R16, 254
   \   0000005C   4F1F               SBCI    R17, 255
   \   0000005E   ....               RCALL   HSVtoRGB
    421                  
    422                  for(uint8_t i=17; i>2; i--) //colors shifting
   \   00000060   E141               LDI     R20, 17
   \   00000062   C013               RJMP    ??GiveTargetBLShift_2
    423                      smooth[i].target = smooth[i-3].target;
   \                     ??GiveTargetBLShift_3:
   \   00000064   E050               LDI     R21, 0
   \   00000066   E006               LDI     R16, 6
   \   00000068   E010               LDI     R17, 0
   \   0000006A   ........           CALL    ?S_EC_MUL_L02
   \   0000006E   01F8               MOVW    R31:R30, R17:R16
   \   00000070   ....               SUBI    R30, LOW((-(smooth - 17) & 0xFFFF))
   \   00000072   ....               SBCI    R31, HIGH((-(smooth - 17) & 0xFFFF))
   \   00000074   8120               LD      R18, Z
   \   00000076   E050               LDI     R21, 0
   \   00000078   E006               LDI     R16, 6
   \   0000007A   E010               LDI     R17, 0
   \   0000007C   ........           CALL    ?S_EC_MUL_L02
   \   00000080   01F8               MOVW    R31:R30, R17:R16
   \   00000082   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   00000084   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   00000086   8321               STD     Z+1, R18
   \   00000088   954A               DEC     R20
   \                     ??GiveTargetBLShift_2:
   \   0000008A   3043               CPI     R20, 3
   \   0000008C   F758               BRCC    ??GiveTargetBLShift_3
    424                          
    425                  smooth[0].target = tempR;
   \   0000008E   810A               LDD     R16, Y+2
   \   00000090   9300....           STS     (smooth + 1), R16
    426                  smooth[1].target = tempG;
   \   00000094   8109               LDD     R16, Y+1
   \   00000096   9300....           STS     (smooth + 7), R16
    427                  smooth[2].target = tempB;
   \   0000009A   8108               LD      R16, Y
   \   0000009C   9300....           STS     (smooth + 13), R16
    428              }
    429              
    430              return smooth[channel].target;
   \                     ??GiveTargetBLShift_1:
   \   000000A0   2F48               MOV     R20, R24
   \   000000A2   E050               LDI     R21, 0
   \   000000A4   E006               LDI     R16, 6
   \   000000A6   E010               LDI     R17, 0
   \   000000A8   ........           CALL    ?S_EC_MUL_L02
   \   000000AC   01F8               MOVW    R31:R30, R17:R16
   \   000000AE   ....               SUBI    R30, LOW((-(smooth) & 0xFFFF))
   \   000000B0   ....               SBCI    R31, (-(smooth) & 0xFFFF) >> 8
   \   000000B2   8101               LDD     R16, Z+1
   \   000000B4   9623               ADIW    R29:R28, 3
   \   000000B6   9189               LD      R24, Y+
   \   000000B8   9508               RET
    431          }

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??cnt:
   \   00000000                      DS8 2
    432          
    433          /*******************************************************************************
    434          * Function Name  : GiveSpeedBLShift
    435          * Input          : Channel
    436          * Return         : Speed value
    437          *******************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    438          uint8_t GiveSpeedBLShift(uint8_t channel)
   \                     GiveSpeedBLShift:
    439          {
    440              return 3;
   \   00000000   E003               LDI     R16, 3
   \   00000002   9508               RET
    441          }
    442          
    443          /*******************************************************************************
    444          * Function Name  : GiveWaitBLShift
    445          * Input          : Channel
    446          * Return         : Wait time value 
    447          *******************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    448          uint16_t GiveWaitBLShift(uint8_t channel)
   \                     GiveWaitBLShift:
    449          {
    450              return 10;
   \   00000000   E00A               LDI     R16, 10
   \   00000002   E010               LDI     R17, 0
   \   00000004   9508               RET
    451          }
    452          
    453          
    454          
    455          
    456          /*============================================================================*/
    457          /*============= BINARY MODE - seconds->binary colors =========================*/
    458          /*============================================================================*/
    459          /*******************************************************************************
    460          * Function Name  : BinarySecondsBL
    461          * Description    : Binary backlight - seconds converts to binary backlight
    462          *******************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    463          void BinarySecondsBL()
   \                     BinarySecondsBL:
    464          {    
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
    465              for(uint8_t i=0; i<18; i++)
   \   00000004   E080               LDI     R24, 0
   \   00000006   C005               RJMP    ??BinarySecondsBL_0
    466                  SmoothProcess(i, &sBinary);
   \                     ??BinarySecondsBL_1:
   \   00000008   ....               LDI     R18, LOW(sBinary)
   \   0000000A   ....               LDI     R19, (sBinary) >> 8
   \   0000000C   2F08               MOV     R16, R24
   \   0000000E   ....               RCALL   SmoothProcess
   \   00000010   9583               INC     R24
   \                     ??BinarySecondsBL_0:
   \   00000012   3182               CPI     R24, 18
   \   00000014   F3C8               BRCS    ??BinarySecondsBL_1
    467              
    468              for(uint8_t i=0; i<6; i++)
   \   00000016   E080               LDI     R24, 0
   \   00000018   C01E               RJMP    ??BinarySecondsBL_2
    469              {
    470                  outR[i] = GetSmoothCurrent(3*i+0);
   \                     ??BinarySecondsBL_3:
   \   0000001A   E003               LDI     R16, 3
   \   0000001C   9F80               MUL     R24, R16
   \   0000001E   2D00               MOV     R16, R0
   \   00000020   ....               RCALL   GetSmoothCurrent
   \   00000022   E090               LDI     R25, 0
   \   00000024   01FC               MOVW    R31:R30, R25:R24
   \   00000026   ....               SUBI    R30, LOW((-(outR) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(outR) & 0xFFFF) >> 8
   \   0000002A   8300               ST      Z, R16
    471                  outG[i] = GetSmoothCurrent(3*i+1);
   \   0000002C   E003               LDI     R16, 3
   \   0000002E   9F80               MUL     R24, R16
   \   00000030   2D00               MOV     R16, R0
   \   00000032   9503               INC     R16
   \   00000034   ....               RCALL   GetSmoothCurrent
   \   00000036   E090               LDI     R25, 0
   \   00000038   01FC               MOVW    R31:R30, R25:R24
   \   0000003A   ....               SUBI    R30, LOW((-(outG) & 0xFFFF))
   \   0000003C   ....               SBCI    R31, (-(outG) & 0xFFFF) >> 8
   \   0000003E   8300               ST      Z, R16
    472                  outB[i] = GetSmoothCurrent(3*i+2);
   \   00000040   E003               LDI     R16, 3
   \   00000042   9F80               MUL     R24, R16
   \   00000044   2D00               MOV     R16, R0
   \   00000046   5F0E               SUBI    R16, 254
   \   00000048   ....               RCALL   GetSmoothCurrent
   \   0000004A   E090               LDI     R25, 0
   \   0000004C   01FC               MOVW    R31:R30, R25:R24
   \   0000004E   ....               SUBI    R30, LOW((-(outB) & 0xFFFF))
   \   00000050   ....               SBCI    R31, (-(outB) & 0xFFFF) >> 8
   \   00000052   8300               ST      Z, R16
    473              }  
   \   00000054   9583               INC     R24
   \                     ??BinarySecondsBL_2:
   \   00000056   3086               CPI     R24, 6
   \   00000058   F300               BRCS    ??BinarySecondsBL_3
    474          }
   \   0000005A   9189               LD      R24, Y+
   \   0000005C   9199               LD      R25, Y+
   \   0000005E   9508               RET
    475          
    476          /*******************************************************************************
    477          * Function Name  : BinaryChangeEffect
    478          * Description    : Change color pair for binary backlight
    479          * Input          : Direction: +1, -1
    480          *******************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    481          void BinaryChangeEffect(uint8_t direction)
   \                     BinaryChangeEffect:
    482          {    
    483              if(direction == DIR_UP)
   \   00000000   3001               CPI     R16, 1
   \   00000002   F459               BRNE    ??BinaryChangeEffect_0
    484              {
    485                  if(++binaryType >= 18)  binaryType = 0; 
   \   00000004   9100....           LDS     R16, binaryType
   \   00000008   9503               INC     R16
   \   0000000A   9300....           STS     binaryType, R16
   \   0000000E   3102               CPI     R16, 18
   \   00000010   F088               BRCS    ??BinaryChangeEffect_1
   \   00000012   E000               LDI     R16, 0
   \   00000014   9300....           STS     binaryType, R16
   \   00000018   9508               RET
    486              }
    487              else
    488              {
    489                  if(binaryType == 0)     binaryType = 17;
   \                     ??BinaryChangeEffect_0:
   \   0000001A   9100....           LDS     R16, binaryType
   \   0000001E   2300               TST     R16
   \   00000020   F421               BRNE    ??BinaryChangeEffect_2
   \   00000022   E101               LDI     R16, 17
   \   00000024   9300....           STS     binaryType, R16
   \   00000028   9508               RET
    490                  else                    binaryType--; 
   \                     ??BinaryChangeEffect_2:
   \   0000002A   9100....           LDS     R16, binaryType
   \   0000002E   950A               DEC     R16
   \   00000030   9300....           STS     binaryType, R16
    491              }
    492          }
   \                     ??BinaryChangeEffect_1:
   \   00000034   9508               RET
    493          
    494          /*******************************************************************************
    495          * Function Name  : GiveTargetBLBinary
    496          * Description    : 
    497          * Input          : Channel
    498          * Return         : Current bright value
    499          *******************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    500          uint8_t GiveTargetBLBinary(uint8_t channel)
   \                     GiveTargetBLBinary:
    501          {
   \   00000000   ........           CALL    ?PROLOGUE3_L09
   \   00000004   2FA0               MOV     R26, R16
    502              if(BitIsSet(sec, 5-channel/3))
   \   00000006   9190....           LDS     R25, `sec`
   \   0000000A   E085               LDI     R24, 5
   \   0000000C   E043               LDI     R20, 3
   \   0000000E   2F0A               MOV     R16, R26
   \   00000010   ........           CALL    ?UC_DIVMOD_L01
   \   00000014   1B80               SUB     R24, R16
   \   00000016   2F48               MOV     R20, R24
   \   00000018   E001               LDI     R16, 1
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   ........           CALL    ?S_SHL_L02
   \   00000020   2390               AND     R25, R16
   \   00000022   2399               TST     R25
   \   00000024   F0B9               BREQ    ??GiveTargetBLBinary_0
    503                  return TABLE[ channel%3   ][binaryType]*255; 
   \   00000026   E043               LDI     R20, 3
   \   00000028   2F0A               MOV     R16, R26
   \   0000002A   ........           CALL    ?UC_DIVMOD_L01
   \   0000002E   E050               LDI     R21, 0
   \   00000030   E102               LDI     R16, 18
   \   00000032   E010               LDI     R17, 0
   \   00000034   ........           CALL    ?S_EC_MUL_L02
   \   00000038   ....               LDI     R30, LOW(TABLE)
   \   0000003A   ....               LDI     R31, (TABLE) >> 8
   \   0000003C   0FE0               ADD     R30, R16
   \   0000003E   1FF1               ADC     R31, R17
   \   00000040   9100....           LDS     R16, binaryType
   \   00000044   E010               LDI     R17, 0
   \   00000046   0FE0               ADD     R30, R16
   \   00000048   1FF1               ADC     R31, R17
   \   0000004A   9114               LPM     R17, Z
   \   0000004C   EF0F               LDI     R16, 255
   \   0000004E   9F10               MUL     R17, R16
   \   00000050   2D00               MOV     R16, R0
   \   00000052   C017               RJMP    ??GiveTargetBLBinary_1
    504              else
    505                  return TABLE[ channel%3+3 ][binaryType]*255;
   \                     ??GiveTargetBLBinary_0:
   \   00000054   ....               LDI     R24, LOW((TABLE + 54))
   \   00000056   ....               LDI     R25, HIGH((TABLE + 54))
   \   00000058   9100....           LDS     R16, binaryType
   \   0000005C   E010               LDI     R17, 0
   \   0000005E   0F80               ADD     R24, R16
   \   00000060   1F91               ADC     R25, R17
   \   00000062   E043               LDI     R20, 3
   \   00000064   2F0A               MOV     R16, R26
   \   00000066   ........           CALL    ?UC_DIVMOD_L01
   \   0000006A   E050               LDI     R21, 0
   \   0000006C   E102               LDI     R16, 18
   \   0000006E   E010               LDI     R17, 0
   \   00000070   ........           CALL    ?S_EC_MUL_L02
   \   00000074   0F80               ADD     R24, R16
   \   00000076   1F91               ADC     R25, R17
   \   00000078   01FC               MOVW    R31:R30, R25:R24
   \   0000007A   9114               LPM     R17, Z
   \   0000007C   EF0F               LDI     R16, 255
   \   0000007E   9F10               MUL     R17, R16
   \   00000080   2D00               MOV     R16, R0
   \                     ??GiveTargetBLBinary_1:
   \   00000082   E0E3               LDI     R30, 3
   \   00000084   ........           JMP     ?EPILOGUE_B3_L09
    506          }
    507          
    508          /*******************************************************************************
    509          * Function Name  : GiveSpeedBLBinary
    510          * Description    : 
    511          * Input          : Channel
    512          * Return         : Current bright value
    513          *******************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    514          uint8_t GiveSpeedBLBinary(uint8_t channel)
   \                     GiveSpeedBLBinary:
    515          {
    516              return 1;
   \   00000000   E001               LDI     R16, 1
   \   00000002   9508               RET
    517          }
    518          
    519          /*******************************************************************************
    520          * Function Name  : GiveWaitBLBinary
    521          * Input          : Channel
    522          * Return         : Wait time value
    523          *******************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    524          uint16_t GiveWaitBLBinary(uint8_t channel)
   \                     GiveWaitBLBinary:
    525          {
    526              return 0;
   \   00000000   E000               LDI     R16, 0
   \   00000002   E010               LDI     R17, 0
   \   00000004   9508               RET
    527          }
    528          
    529          
    530          
    531          
    532          /*******************************************************************************
    533          * Function Name  : HSVchange
    534          * Description    : Manual color set
    535          * Input          : Direction: +4, -4
    536          *******************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    537          void HSVchange(uint8_t dir)           
   \                     HSVchange:
    538          {
    539              static uint16_t HSVTemp;
    540              
    541              if(dir)
   \   00000000   2300               TST     R16
   \   00000002   F0C1               BREQ    ??HSVchange_0
    542              {   
    543                  if(HSVTemp >= 356)  HSVTemp = 0;
   \   00000004   9100....           LDS     R16, ??HSVTemp
   \   00000008   9110....           LDS     R17, (??HSVTemp + 1)
   \   0000000C   3604               CPI     R16, 100
   \   0000000E   E021               LDI     R18, 1
   \   00000010   0712               CPC     R17, R18
   \   00000012   F038               BRCS    ??HSVchange_1
   \   00000014   E000               LDI     R16, 0
   \   00000016   E010               LDI     R17, 0
   \   00000018   9300....           STS     ??HSVTemp, R16
   \   0000001C   9310....           STS     (??HSVTemp + 1), R17
   \   00000020   C01E               RJMP    ??HSVchange_2
    544                  else                HSVTemp += 4;
   \                     ??HSVchange_1:
   \   00000022   ....               LDI     R30, LOW(??HSVTemp)
   \   00000024   ....               LDI     R31, (??HSVTemp) >> 8
   \   00000026   8100               LD      R16, Z
   \   00000028   8111               LDD     R17, Z+1
   \   0000002A   5F0C               SUBI    R16, 252
   \   0000002C   4F1F               SBCI    R17, 255
   \   0000002E   8300               ST      Z, R16
   \   00000030   8311               STD     Z+1, R17
   \   00000032   C015               RJMP    ??HSVchange_2
    545              }
    546              else
    547              {
    548                  if(HSVTemp <= 4)    HSVTemp = 360; 
   \                     ??HSVchange_0:
   \   00000034   91E0....           LDS     R30, ??HSVTemp
   \   00000038   91F0....           LDS     R31, (??HSVTemp + 1)
   \   0000003C   9735               SBIW    R31:R30, 5
   \   0000003E   F438               BRCC    ??HSVchange_3
   \   00000040   E608               LDI     R16, 104
   \   00000042   E011               LDI     R17, 1
   \   00000044   9300....           STS     ??HSVTemp, R16
   \   00000048   9310....           STS     (??HSVTemp + 1), R17
   \   0000004C   C008               RJMP    ??HSVchange_2
    549                  else                HSVTemp -= 4;
   \                     ??HSVchange_3:
   \   0000004E   ....               LDI     R30, LOW(??HSVTemp)
   \   00000050   ....               LDI     R31, (??HSVTemp) >> 8
   \   00000052   8100               LD      R16, Z
   \   00000054   8111               LDD     R17, Z+1
   \   00000056   5004               SUBI    R16, 4
   \   00000058   4010               SBCI    R17, 0
   \   0000005A   8300               ST      Z, R16
   \   0000005C   8311               STD     Z+1, R17
    550              } 
    551              
    552              HSVtoRGB(&ManualR, &ManualG, &ManualB, HSVTemp);
   \                     ??HSVchange_2:
   \   0000005E   9160....           LDS     R22, ??HSVTemp
   \   00000062   9170....           LDS     R23, (??HSVTemp + 1)
   \   00000066   ....               LDI     R20, LOW(ManualB)
   \   00000068   ....               LDI     R21, (ManualB) >> 8
   \   0000006A   ....               LDI     R18, LOW(ManualG)
   \   0000006C   ....               LDI     R19, (ManualG) >> 8
   \   0000006E   ....               LDI     R16, LOW(ManualR)
   \   00000070   ....               LDI     R17, (ManualR) >> 8
   \   00000072   ....               RCALL   HSVtoRGB
    553          }
   \   00000074   9508               RET

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??HSVTemp:
   \   00000000                      DS8 2
    554          
    555          
    556          /*******************************************************************************
    557          * Function Name  : Mix
    558          * Description    : Backlight mix mode
    559          *******************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    560          void MixBL()
   \                     MixBL:
    561          {
   \   00000000   938A               ST      -Y, R24
    562              static uint8_t mixType = 0;
    563              
    564              if(!mixTime)
   \   00000002   9100....           LDS     R16, mixTime
   \   00000006   2300               TST     R16
   \   00000008   F521               BRNE    ??MixBL_0
    565              {   
    566                  mixType = RandomGet()%5;
   \   0000000A   ........           CALL    RandomGet
   \   0000000E   E045               LDI     R20, 5
   \   00000010   E050               LDI     R21, 0
   \   00000012   ........           CALL    ?US_DIVMOD_L02
   \   00000016   9340....           STS     ??mixType, R20
    567                  
    568                  //for Binary mode choose random binary colors
    569                  if(mixType == 4) binaryType = RandomGet4()%18;  
   \   0000001A   9100....           LDS     R16, ??mixType
   \   0000001E   3004               CPI     R16, 4
   \   00000020   F441               BRNE    ??MixBL_1
   \   00000022   ........           CALL    RandomGet4
   \   00000026   E142               LDI     R20, 18
   \   00000028   E050               LDI     R21, 0
   \   0000002A   ........           CALL    ?US_DIVMOD_L02
   \   0000002E   9340....           STS     binaryType, R20
    570                  
    571                  mixTime = eMIX_DELAY + RandomGet4()%50;
   \                     ??MixBL_1:
   \   00000032   ........           CALL    RandomGet4
   \   00000036   0198               MOVW    R19:R18, R17:R16
   \   00000038   ....               LDI     R20, LOW(eMIX_DELAY)
   \   0000003A   ....               LDI     R21, (eMIX_DELAY) >> 8
   \   0000003C   ........           CALL    __eeget8_16
   \   00000040   2F80               MOV     R24, R16
   \   00000042   E342               LDI     R20, 50
   \   00000044   E050               LDI     R21, 0
   \   00000046   0189               MOVW    R17:R16, R19:R18
   \   00000048   ........           CALL    ?US_DIVMOD_L02
   \   0000004C   0F84               ADD     R24, R20
   \   0000004E   9380....           STS     mixTime, R24
    572                  
    573                  /*for(uint8_t i=0; i<SMOOTH_NUM_CHANNELS; i++)
    574                      SmoothInit(i);*/
    575              }
    576              
    577              switch(mixType)
   \                     ??MixBL_0:
   \   00000052   9100....           LDS     R16, ??mixType
   \   00000056   5000               SUBI    R16, 0
   \   00000058   F049               BREQ    ??MixBL_2
   \   0000005A   950A               DEC     R16
   \   0000005C   F049               BREQ    ??MixBL_3
   \   0000005E   950A               DEC     R16
   \   00000060   F049               BREQ    ??MixBL_4
   \   00000062   950A               DEC     R16
   \   00000064   F049               BREQ    ??MixBL_5
   \   00000066   950A               DEC     R16
   \   00000068   F049               BREQ    ??MixBL_6
   \   0000006A   C009               RJMP    ??MixBL_7
    578              {
    579                  case 0: FireBL();
   \                     ??MixBL_2:
   \   0000006C   ....               RCALL   FireBL
    580                      break;
   \   0000006E   C007               RJMP    ??MixBL_7
    581                  case 1: RandomAllBL();   
   \                     ??MixBL_3:
   \   00000070   ....               RCALL   RandomAllBL
    582                      break;
   \   00000072   C005               RJMP    ??MixBL_7
    583                  case 2: RandomEachBL();        
   \                     ??MixBL_4:
   \   00000074   ....               RCALL   RandomEachBL
    584                      break; 
   \   00000076   C003               RJMP    ??MixBL_7
    585                  case 3: ShiftBL();      
   \                     ??MixBL_5:
   \   00000078   ....               RCALL   ShiftBL
    586                      break; 
   \   0000007A   C001               RJMP    ??MixBL_7
    587                  case 4: BinarySecondsBL(); 
   \                     ??MixBL_6:
   \   0000007C   ....               RCALL   BinarySecondsBL
    588                      break; 
    589              }
    590          }
   \                     ??MixBL_7:
   \   0000007E   9189               LD      R24, Y+
   \   00000080   9508               RET

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??mixType:
   \   00000000                      DS8 1
    591          
    592          
    593          /*******************************************************************************
    594          * Function Name  : MixBLReduceTime
    595          * Description    : Decrement seconds-counter in mix mode                     
    596          *******************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    597          void MixBLReduceTime()
   \                     MixBLReduceTime:
    598          {
    599              if(mixTime) mixTime--;   
   \   00000000   9100....           LDS     R16, mixTime
   \   00000004   2300               TST     R16
   \   00000006   F029               BREQ    ??MixBLReduceTime_0
   \   00000008   9100....           LDS     R16, mixTime
   \   0000000C   950A               DEC     R16
   \   0000000E   9300....           STS     mixTime, R16
    600          }
   \                     ??MixBLReduceTime_0:
   \   00000012   9508               RET
    601          
    602          
    603          /*******************************************************************************
    604          * Function Name  : BackLightChange
    605          * Description    : Change backlight type
    606          *******************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    607          void BackLightChange()
   \                     BackLightChange:
    608          {
    609              if(++BLType >= 7) BLType = 0;   
   \   00000000   9100....           LDS     R16, BLType
   \   00000004   9503               INC     R16
   \   00000006   9300....           STS     BLType, R16
   \   0000000A   3007               CPI     R16, 7
   \   0000000C   F018               BRCS    ??BackLightChange_0
   \   0000000E   E000               LDI     R16, 0
   \   00000010   9300....           STS     BLType, R16
    610              
    611              ShiftLeft(BLType);
   \                     ??BackLightChange_0:
   \   00000014   9100....           LDS     R16, BLType
   \   00000018   E010               LDI     R17, 0
   \   0000001A   ........           CALL    ShiftLeft
    612              ShiftRight();
   \   0000001E   ........           CALL    ShiftRight
    613          }
   \   00000022   9508               RET
    614          
    615          
    616          /*******************************************************************************
    617          * Function Name  : BackLightProcess
    618          * Description    : Backlight processing
    619          *******************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    620          void BackLightProcess()
   \                     BackLightProcess:
    621          {
    622              switch(BLType)
   \   00000000   9100....           LDS     R16, BLType
   \   00000004   5000               SUBI    R16, 0
   \   00000006   F069               BREQ    ??BackLightProcess_0
   \   00000008   950A               DEC     R16
   \   0000000A   F069               BREQ    ??BackLightProcess_1
   \   0000000C   950A               DEC     R16
   \   0000000E   F069               BREQ    ??BackLightProcess_2
   \   00000010   950A               DEC     R16
   \   00000012   F069               BREQ    ??BackLightProcess_3
   \   00000014   950A               DEC     R16
   \   00000016   F069               BREQ    ??BackLightProcess_4
   \   00000018   950A               DEC     R16
   \   0000001A   F069               BREQ    ??BackLightProcess_5
   \   0000001C   950A               DEC     R16
   \   0000001E   F069               BREQ    ??BackLightProcess_6
   \   00000020   9508               RET
    623              {
    624                  case 0: MixBL();  
   \                     ??BackLightProcess_0:
   \   00000022   ....               RCALL   MixBL
    625                      break;
   \   00000024   9508               RET
    626                  
    627                  case 1: FireBL();               
   \                     ??BackLightProcess_1:
   \   00000026   ....               RCALL   FireBL
    628                      break;
   \   00000028   9508               RET
    629                          
    630                  case 2: ShiftBL();
   \                     ??BackLightProcess_2:
   \   0000002A   ....               RCALL   ShiftBL
    631                      break;
   \   0000002C   9508               RET
    632                 
    633                  case 3: BinarySecondsBL();
   \                     ??BackLightProcess_3:
   \   0000002E   ....               RCALL   BinarySecondsBL
    634                      break; 
   \   00000030   9508               RET
    635                  
    636                  case 4: RandomEachBL();
   \                     ??BackLightProcess_4:
   \   00000032   ....               RCALL   RandomEachBL
    637                      break; 
   \   00000034   9508               RET
    638                  
    639                  case 5: RandomAllBL();
   \                     ??BackLightProcess_5:
   \   00000036   ....               RCALL   RandomAllBL
    640                      break; 
   \   00000038   9508               RET
    641                      
    642                  case 6: for(uint8_t k=0; k<6; k++) 
   \                     ??BackLightProcess_6:
   \   0000003A   E000               LDI     R16, 0
   \   0000003C   C016               RJMP    ??BackLightProcess_7
    643                          {
    644                              outR[k] = ManualR; 
   \                     ??BackLightProcess_8:
   \   0000003E   9120....           LDS     R18, ManualR
   \   00000042   E010               LDI     R17, 0
   \   00000044   01F8               MOVW    R31:R30, R17:R16
   \   00000046   ....               SUBI    R30, LOW((-(outR) & 0xFFFF))
   \   00000048   ....               SBCI    R31, (-(outR) & 0xFFFF) >> 8
   \   0000004A   8320               ST      Z, R18
    645                              outG[k] = ManualG; 
   \   0000004C   9120....           LDS     R18, ManualG
   \   00000050   E010               LDI     R17, 0
   \   00000052   01F8               MOVW    R31:R30, R17:R16
   \   00000054   ....               SUBI    R30, LOW((-(outG) & 0xFFFF))
   \   00000056   ....               SBCI    R31, (-(outG) & 0xFFFF) >> 8
   \   00000058   8320               ST      Z, R18
    646                              outB[k] = ManualB;
   \   0000005A   9120....           LDS     R18, ManualB
   \   0000005E   E010               LDI     R17, 0
   \   00000060   01F8               MOVW    R31:R30, R17:R16
   \   00000062   ....               SUBI    R30, LOW((-(outB) & 0xFFFF))
   \   00000064   ....               SBCI    R31, (-(outB) & 0xFFFF) >> 8
   \   00000066   8320               ST      Z, R18
    647                          }
   \   00000068   9503               INC     R16
   \                     ??BackLightProcess_7:
   \   0000006A   3006               CPI     R16, 6
   \   0000006C   F340               BRCS    ??BackLightProcess_8
    648                      break;
    649              }         
    650          }
   \   0000006E   9508               RET
    651          
    652          
    653          /*******************************************************************************
    654          * Function Name  : BLGetType
    655          * Return         : Backlight type   
    656          *******************************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    657          uint8_t BLGetType()
   \                     BLGetType:
    658          {
    659              return BLType;   
   \   00000000   9100....           LDS     R16, BLType
   \   00000004   9508               RET
    660          }

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for sFire>`:
   \   00000000   ............       DC16 GiveTargetBLFire/2, GiveSpeedBLFire/2, GiveWaitBLFire/2

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for sRandomAll>`:
   \   00000000   ............       DC16 GiveTargetBLRandAll/2, GiveSpeedBLRandAll/2, GiveWaitBLRandAll/2

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for sRandomEach>`:
   \   00000000   ........           DC16 GiveTargetBLRandEach/2, GiveSpeedBLRandEach/2
   \   00000004   ....               DC16 GiveWaitBLRandEach/2

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for sShift>`:
   \   00000000   ............       DC16 GiveTargetBLShift/2, GiveSpeedBLShift/2, GiveWaitBLShift/2

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for sBinary>`:
   \   00000000   ............       DC16 GiveTargetBLBinary/2, GiveSpeedBLBinary/2, GiveWaitBLBinary/2

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for HSVtoRGB>_0`:
   \   00000000   0000               DW      0
   \   00000002   00                 DB      0
   \   00000003   ....               DW      (??HSVtoRGB_3) /2
   \   00000005   0006               DW      6
   \   00000007   ....               DW      (??HSVtoRGB_2) /2
   \   00000009   ....               DW      (??HSVtoRGB_4) /2
   \   0000000B   ....               DW      (??HSVtoRGB_5) /2
   \   0000000D   ....               DW      (??HSVtoRGB_6) /2
   \   0000000F   ....               DW      (??HSVtoRGB_7) /2
   \   00000011   ....               DW      (??HSVtoRGB_8) /2
   \   00000013   00                 DB      0

   Maximum stack usage in bytes:

     Function              CSTACK RSTACK
     --------              ------ ------
     BLGetType                 0      2
     BackLightChange           0      2
       -> ShiftLeft            0      2
       -> ShiftRight           0      2
     BackLightProcess          0      2
       -> MixBL                0      2
       -> FireBL               0      2
       -> ShiftBL              0      2
       -> BinarySecondsBL      0      2
       -> RandomEachBL         0      2
       -> RandomAllBL          0      2
     BinaryChangeEffect        0      2
     BinarySecondsBL           2      2
       -> SmoothProcess        2      2
       -> GetSmoothCurrent     2      2
       -> GetSmoothCurrent     2      2
       -> GetSmoothCurrent     2      2
     FireBL                    4      4
       -> RandomGet4           4      2
       -> SmoothProcess        4      2
       -> GetSmoothCurrent     4      2
     GetSmoothCurrent          0      4
     GiveSpeedBLBinary         0      2
     GiveSpeedBLFire           0      4
       -> RandomGet            0      2
     GiveSpeedBLRandAll        0      2
     GiveSpeedBLRandEach       0      4
       -> RandomGet            0      2
     GiveSpeedBLShift          0      2
     GiveTargetBLBinary        3      4
     GiveTargetBLFire          0      4
       -> RandomGet4           0      2
     GiveTargetBLRandAll       0      4
       -> RandomGet4           0      2
       -> HSVtoRGB             0      2
     GiveTargetBLRandEach      8      4
       -> RandomGet4           8      2
       -> HSVtoRGB             8      2
     GiveTargetBLShift         4      4
       -> RandomGet4           4      2
       -> HSVtoRGB             4      2
     GiveWaitBLBinary          0      2
     GiveWaitBLFire            0      4
       -> RandomGet            0      2
       -> RandomGet            0      2
     GiveWaitBLRandAll         0      4
       -> RandomGet4           0      2
     GiveWaitBLRandEach        0      4
       -> RandomGet4           0      2
     GiveWaitBLShift           0      2
     HSVchange                 0      2
       -> HSVtoRGB             0      2
     HSVtoRGB                 13      4
     MixBL                     1      4
       -> RandomGet            1      2
       -> RandomGet4           1      2
       -> RandomGet4           1      2
       -> FireBL               1      2
       -> RandomAllBL          1      2
       -> RandomEachBL         1      2
       -> ShiftBL              1      2
       -> BinarySecondsBL      1      2
     MixBLReduceTime           0      2
     RandomAllBL               2      2
       -> SmoothProcess        2      2
       -> GetSmoothCurrent     2      2
       -> GetSmoothCurrent     2      2
       -> GetSmoothCurrent     2      2
     RandomEachBL              2      2
       -> SmoothProcess        2      2
       -> GetSmoothCurrent     2      2
       -> GetSmoothCurrent     2      2
       -> GetSmoothCurrent     2      2
     ShiftBL                   2      2
       -> SmoothProcess        2      2
       -> GetSmoothCurrent     2      2
       -> GetSmoothCurrent     2      2
       -> GetSmoothCurrent     2      2
     SmoothInit                0      4
     SmoothProcess             4      4
       ->   Indirect call      4      2
       ->   Indirect call      4      2
       ->   Indirect call      4      2
     ZeroBL                    0      2


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     TABLE                           108
     RandomChannelEachBL              18
     ManualR                           1
     ManualG                           1
     ManualB                           1
     binaryType                        1
     BLType                            1
     mixTime                           1
     smooth                          108
     sFire                             6
     sRandomAll                        6
     sRandomEach                       6
     sShift                            6
     sBinary                           6
     ZeroBL                           44
     HSVtoRGB                        272
     SmoothInit                       82
     SmoothProcess                   680
     GetSmoothCurrent                 22
     FireBL                          126
     GiveTargetBLFire                 18
     GiveSpeedBLFire                  18
     GiveWaitBLFire                   86
     RandomAllBL                      80
     GiveTargetBLRandAll              62
     R                                 1
     G                                 1
     B                                 1
     GiveSpeedBLRandAll                4
     GiveWaitBLRandAll                20
     RandomEachBL                    104
     GiveTargetBLRandEach            206
     R                                 6
     G                                 6
     B                                 6
     GiveSpeedBLRandEach              18
     GiveWaitBLRandEach               20
     ShiftBL                          96
     GiveTargetBLShift               186
     cnt                               2
     GiveSpeedBLShift                  4
     GiveWaitBLShift                   6
     BinarySecondsBL                  96
     BinaryChangeEffect               54
     GiveTargetBLBinary              136
     GiveSpeedBLBinary                 4
     GiveWaitBLBinary                  6
     HSVchange                       118
     HSVTemp                           2
     MixBL                           130
     mixType                           1
     MixBLReduceTime                  20
     BackLightChange                  36
     BackLightProcess                112
     BLGetType                         6
     ?<Initializer for sFire>          6
     ?<Initializer for sRandomAll>     6
     ?<Initializer for sRandomEach>    6
     ?<Initializer for sShift>         6
     ?<Initializer for sBinary>        6
     ?<Jumptable for HSVtoRGB>_0      20
      Others                          12

 
 2 872 bytes in segment CODE
    12 bytes in segment INITTAB
   126 bytes in segment NEAR_F
    30 bytes in segment NEAR_I
    30 bytes in segment NEAR_ID
   140 bytes in segment NEAR_Z
    20 bytes in segment SWITCH
 
 3 048 bytes of CODE memory (+ 12 bytes shared)
   170 bytes of DATA memory

Errors: none
Warnings: none
